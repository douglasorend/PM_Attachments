<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
<id>sologhost:pmattachments</id>
<version>2.12</version>

<file name="$sourcedir/ManageAttachments.php">
	<operation>
		<search position="replace"><![CDATA[function pauseAttachmentMaintenance($to_fix, $max_substep = 0)]]></search>
		<add><![CDATA[function pauseAttachmentMaintenance($to_fix, $max_substep = 0, $pm = false)]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[$context['continue_get_data'] = '?action=admin;area=manageattachments;sa=repair' . (isset($_GET['fixErrors']) ? ';fixErrors' : '') . ';step=' . $_GET['step'] . ';substep=' . $_GET['substep'] . ';' . $context['session_var'] . '=' . $context['session_id'];]]></search>
		<add><![CDATA[$context['continue_get_data'] = '?action=admin;area=manageattachments;sa=' . ($pm ? 'pmrepair' : 'repair') . (isset($_GET['fixErrors']) ? ';fixErrors' : '') . ';step=' . $_GET['step'] . ';substep=' . $_GET['substep'] . ';' . $context['session_var'] . '=' . $context['session_id'];]]></add>
	</operation>
</file>
<file name="$sourcedir/PersonalMessage.php">
	<operation>
		<search position="after"><![CDATA[global $txt, $scripturl, $modSettings, $context, $subjects_request]]></search>
		<add><![CDATA[//
	// PM ATTACHMENTS MOD MessageFolder global...
	//
	global $attachments;
	//
	// PM ATTACHMENTS MOD END!!
	//
	]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[require_once($sourcedir . '/Subs-Post.php');]]></search>
		<add><![CDATA[
	require_once($sourcedir . '/Subs-PMAttachments.php');
	Add_PM_JavaScript();]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[		// This is pretty much EVERY pm!
		$all_pms = array_merge($pms, $display_pms);
		$all_pms = array_unique($all_pms);]]></search>
		<add><![CDATA[

		//
		// PM ATTACHMENTS BEGIN...
		//

		$attachments = array();

		if (!empty($all_pms))
		{
			// Fetch attachments.
			if (!empty($modSettings['pmAttachmentEnable']) && allowedTo('pm_view_attachments'))
			{
				$request = $smcFunc['db_query']('', '
					SELECT
						pa.id_attach, pa.id_folder, pa.id_pm, pa.pm_report, pa.filename, pa.file_hash, COALESCE(pa.size, 0) AS filesize, pa.downloads,
						pa.width, pa.height' . (empty($modSettings['pmAttachmentShowImages']) || empty($modSettings['pmAttachmentThumbnails']) ? '' : ',
						COALESCE(thumb.id_attach, 0) AS id_thumb, thumb.width AS thumb_width, thumb.height AS thumb_height') . '
					FROM {db_prefix}pm_attachments AS pa' . (empty($modSettings['pmAttachmentShowImages']) || empty($modSettings['pmAttachmentThumbnails']) ? '' : '
						LEFT JOIN {db_prefix}pm_attachments AS thumb ON (thumb.id_attach = pa.id_thumb)') . '
					WHERE pa.attachment_type = {int:attachment_type} AND (pa.id_pm IN ({array_int:pm_list}) OR pa.pm_report IN ({array_int:pm_list}))',
					array(
						'pm_list' => $all_pms,
						'attachment_type' => 0,
					)
				);
				$temp = array();
				while ($row = $smcFunc['db_fetch_assoc']($request))
				{
					$temp[$row['id_attach']] = $row;
					
					if (!empty($row['pm_report']))
						if (!isset($attachments[$row['pm_report']]))
							$attachments[$row['pm_report']] = array();

					if (!isset($attachments[$row['id_pm']]))
						$attachments[$row['id_pm']] = array();
				}
				$smcFunc['db_free_result']($request);

				// This is better than sorting it with the query...
				ksort($temp);

				foreach ($temp as $row) {
					if (!empty($row['pm_report']))
						$attachments[$row['pm_report']][] = $row;
					
					$attachments[$row['id_pm']][] = $row;
				}
			}

		}
		//
		// PM ATTACHMENTS END!!
		//]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[function prepareMessageContext($type = 'subject', $reset = false)
{
	global $txt, $scripturl, $modSettings, $context, $messages_request, $memberContext, $recipients, $smcFunc;
	global $user_info, $subjects_request;]]></search>
		<add><![CDATA[
	
	//
	// PM ATTACHMENTS MOD prepareMessageContext global...
	//
	global $attachments;
	//
	// PM ATTACHMENTS MOD END!
	//]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Send the array.
	$output = array(]]></search>
		<add><![CDATA[
		'attachment' => loadPMAttachmentContext($message['id_pm']),]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Set the title...
	$context['page_title'] = $txt['send_message'];]]></search>
		<add><![CDATA[
	
	// Clean up and Clear any attachments that may be in the session...
	if (!empty($_SESSION['temp_pm_attachments']))
	{
		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// Just use the current path for temp files.
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];
		
		foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
		{
			unset($_SESSION['temp_pm_attachments'][$attachID]);
			@unlink($current_attach_dir . '/' . $attachID);
		}
	}]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Set the defaults...
	$context['subject'] = $form_subject;]]></search>
		<add><![CDATA[	// Handle the Attachment info...
	$context['num_allowed_attachments'] = empty($modSettings['attachmentNumPerPMLimit']) ? 50 : $modSettings['attachmentNumPerPMLimit'];
	$context['can_post_attachment'] = !empty($modSettings['pmAttachmentEnable']) && $modSettings['pmAttachmentEnable'] == 1 && allowedTo('pm_post_attachments') && $context['num_allowed_attachments'] > 0 ? 1 : 0;

]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[	// Store the ID for old compatibility.
	$context['post_box_name'] = $editorOptions['id'];

	$context['bcc_value'] = '';]]></search>
		<add><![CDATA[

	// If the user can post attachments prepare the warning labels.
	if (!empty($context['can_post_attachment']))
	{
		$context['allowed_extensions'] = strtr($modSettings['pmAttachmentExtensions'], array(',' => ', '));
		$context['attachment_restrictions'] = array();
		$attachmentRestrictionTypes = array('attachmentNumPerPMLimit', 'attachmentPMLimit', 'pmAttachmentSizeLimit');
		foreach ($attachmentRestrictionTypes as $type)
			if (!empty($modSettings[$type]))
				$context['attachment_restrictions'][] = sprintf($txt['attach_restrict_' . $type], $modSettings[$type]);
	}]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Got some known members?]]></search>
		<add><![CDATA[checkSession('request');

	]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Set everything up like before....]]></search>
		<add><![CDATA[
	// An array to hold all the attachments for this pm.
	$context['current_attachments'] = array();
	
	if (allowedTo('pm_post_attachments'))
	{
		if (empty($_SESSION['temp_pm_attachments']))
			$_SESSION['temp_pm_attachments'] = array();

		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// Just use the current path for temp files.
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];

		$quantity = 0;
		$total_size = 0;

		$temp_start = 0;

		if (!empty($_SESSION['temp_pm_attachments']))
			foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
			{
				$temp_start++;

				if (preg_match('~^post_tmp_' . $user_info['id'] . '_\d+$~', $attachID) == 0)
				{
					unset($_SESSION['temp_pm_attachments'][$attachID]);
					continue;
				}

				if (!empty($_POST['attach_del']) && !in_array($attachID, $_POST['attach_del']))
				{
					$deleted_attachments = true;
					unset($_SESSION['temp_pm_attachments'][$attachID]);
					@unlink($current_attach_dir . '/' . $attachID);
					continue;
				}

				$quantity++;
				$total_size += filesize($current_attach_dir . '/' . $attachID);

				$context['current_attachments'][] = array(
					'name' => $name,
					'id' => $attachID,
				);
			}

		if (!empty($_POST['attach_del']))
		{
			$del_temp = array();
			foreach ($_POST['attach_del'] as $i => $dummy)
				$del_temp[$i] = (int) $dummy;

			if (!empty($context['current_attachments']))
			{
				foreach ($context['current_attachments'] as $k => $dummy)
					if (!in_array($dummy['id'], $del_temp))
					{
						$context['current_attachments'][$k]['unchecked'] = true;
						$deleted_attachments = !isset($deleted_attachments) || is_bool($deleted_attachments) ? 1 : $deleted_attachments + 1;
						$quantity--;
					}
			}
		}

		if (!empty($_FILES['attachment']))
			foreach ($_FILES['attachment']['tmp_name'] as $n => $dummy)
			{
				if ($_FILES['attachment']['name'][$n] == '')
					continue;

				if (!is_uploaded_file($_FILES['attachment']['tmp_name'][$n]) || (@ini_get('open_basedir') == '' && !file_exists($_FILES['attachment']['tmp_name'][$n])))
					fatal_lang_error('attach_timeout', 'critical');

				if (!empty($modSettings['pmAttachmentSizeLimit']) && $_FILES['attachment']['size'][$n] > $modSettings['pmAttachmentSizeLimit'] * 1024)
					fatal_lang_error('file_too_big', false, array($modSettings['pmAttachmentSizeLimit']));

				$quantity++;
				if (!empty($modSettings['attachmentNumPerPMLimit']) && $quantity > $modSettings['attachmentNumPerPMLimit'])
					fatal_lang_error('attachments_limit_per_post', false, array($modSettings['attachmentNumPerPMLimit']));

				$total_size += $_FILES['attachment']['size'][$n];
				if (!empty($modSettings['attachmentPMLimit']) && $total_size > $modSettings['attachmentPMLimit'] * 1024)
					fatal_lang_error('file_too_big', false, array($modSettings['attachmentPMLimit']));

				if (!empty($modSettings['pmAttachmentCheckExtensions']))
				{
					if (!in_array(strtolower(substr(strrchr($_FILES['attachment']['name'][$n], '.'), 1)), explode(',', strtolower($modSettings['pmAttachmentExtensions']))))
						fatal_error($_FILES['attachment']['name'][$n] . '.<br />' . $txt['pm_cant_upload_type'] . ' ' . $modSettings['pmAttachmentExtensions'] . '.', false);
				}

				if (!empty($modSettings['pmAttachmentDirSizeLimit']))
				{
					// Make sure the directory isn't full.
					$dirSize = 0;
					$dir = @opendir($current_attach_dir) or fatal_lang_error('cant_access_upload_path', 'critical');
					while ($file = readdir($dir))
					{
						if ($file == '.' || $file == '..')
							continue;

						if (preg_match('~^post_tmp_\d+_\d+$~', $file) != 0)
						{
							// Temp file is more than 5 hours old!
							if (filemtime($current_attach_dir . '/' . $file) < time() - 18000)
								@unlink($current_attach_dir . '/' . $file);
							continue;
						}

						$dirSize += filesize($current_attach_dir . '/' . $file);
					}
					closedir($dir);

					// Too big!  Maybe you could zip it or something...
					if ($_FILES['attachment']['size'][$n] + $dirSize > $modSettings['pmAttachmentDirSizeLimit'] * 1024)
						fatal_lang_error('ran_out_of_space');
				}

				if (!is_writable($current_attach_dir))
					fatal_lang_error('attachments_no_write', 'critical');

				$attachID = 'post_tmp_' . $user_info['id'] . '_' . $temp_start++;
				$_SESSION['temp_pm_attachments'][$attachID] = basename($_FILES['attachment']['name'][$n]);
				$context['current_attachments'][] = array(
					'name' => basename($_FILES['attachment']['name'][$n]),
					'id' => $attachID,
				);

				$destName = $current_attach_dir . '/' . $attachID;

				if (!move_uploaded_file($_FILES['attachment']['tmp_name'][$n], $destName))
					fatal_lang_error('attach_timeout', 'critical');
				@chmod($destName, 0644);
			}
	}

]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[$context['reply'] = !empty($_REQUEST['replied_to']);]]></search>
		<add><![CDATA[
	$context['num_allowed_attachments'] = empty($modSettings['attachmentNumPerPMLimit']) ? 50 : min($modSettings['attachmentNumPerPMLimit'] - count($context['current_attachments']) + (isset($deleted_attachments) ? $deleted_attachments : 0), $modSettings['attachmentNumPerPMLimit']);
	$context['can_post_attachment'] = !empty($modSettings['pmAttachmentEnable']) && $modSettings['pmAttachmentEnable'] == 1 && allowedTo('pm_post_attachments') && $context['num_allowed_attachments'] > 0 ? 1 : 0;	]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Check whether we need to show the code again.]]></search>
		<add><![CDATA[
	// If the user can post attachments prepare the warning labels.
	if (!empty($context['can_post_attachment']))
	{
		$context['allowed_extensions'] = strtr($modSettings['pmAttachmentExtensions'], array(',' => ', '));
		$context['attachment_restrictions'] = array();
		$attachmentRestrictionTypes = array('attachmentNumPerPMLimit', 'attachmentPMLimit', 'pmAttachmentSizeLimit');
		foreach ($attachmentRestrictionTypes as $type)
			if (!empty($modSettings[$type]))
				$context['attachment_restrictions'][] = sprintf($txt['attach_restrict_' . $type], $modSettings[$type]);
	}

]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Do the actual sending of the PM.]]></search>
		<add><![CDATA[// Check if they are trying to attach a new file...
	if (!empty($_FILES['attachment']['name'][0]) || !empty($_SESSION['temp_pm_attachments']))
	{	
		// Check to make sure everybody can view PM attachments:
		if (!canViewPMAttachments($recipientList))
			return messagePostError($post_errors, $namedRecipientList, $recipientList);

		// Verify they can post them (double checking for guests).
		if (!allowedTo('pm_post_attachments') || $context['user']['is_guest'])
			fatal_error($txt['pm_attach_not_allowed'], false);
		

		// Make sure we're uploading to the right place.
		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// The current directory, of course!
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];

		$quantity = 0;
		$total_size = 0;

		if (!empty($_SESSION['temp_pm_attachments']))
		{
			foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
			{
				if (preg_match('~^post_tmp_' . $user_info['id'] . '_\d+$~', $attachID) == 0)
					continue;

				if (!empty($_POST['attach_del']) && !in_array($attachID, $_POST['attach_del']))
				{
					unset($_SESSION['temp_pm_attachments'][$attachID]);
					@unlink($current_attach_dir . '/' . $attachID);
					continue;
				}

				$_FILES['attachment']['tmp_name'][] = $attachID;
				$_FILES['attachment']['name'][] = $name;
				$_FILES['attachment']['size'][] = filesize($current_attach_dir . '/' . $attachID);
				list ($_FILES['attachment']['width'][], $_FILES['attachment']['height'][]) = @getimagesize($current_attach_dir . '/' . $attachID);

				unset($_SESSION['temp_pm_attachments'][$attachID]);
			}
		}

		if (!isset($_FILES['attachment']['name']))
			$_FILES['attachment']['tmp_name'] = array();

		$attachIDs = array();
		foreach ($_FILES['attachment']['tmp_name'] as $n => $dummy)
		{
			if ($_FILES['attachment']['name'][$n] == '')
				continue;

			// Have we reached the maximum number of files we are allowed?
			$quantity++;
			if (!empty($modSettings['attachmentNumPerPMLimit']) && $quantity > $modSettings['attachmentNumPerPMLimit'])
				fatal_lang_error('attachments_limit_per_post', false, array($modSettings['attachmentNumPerPMLimit']));

			// Check the total upload size for this post...
			$total_size += $_FILES['attachment']['size'][$n];
			if (!empty($modSettings['attachmentPMLimit']) && $total_size > $modSettings['attachmentPMLimit'] * 1024)
				fatal_lang_error('file_too_big', false, array($modSettings['attachmentPMLimit']));

			$pmAttachmentOptions = array(
				'pm' => 0,
				'sender' => $user_info['id'],
				'name' => $_FILES['attachment']['name'][$n],
				'tmp_name' => $_FILES['attachment']['tmp_name'][$n],
				'size' => $_FILES['attachment']['size'][$n],
			);

			require_once($sourcedir . '/Subs-Post.php');

			if (createPMAttachment($pmAttachmentOptions))
			{
				$attachIDs[] = $pmAttachmentOptions['id'];
				if (!empty($pmAttachmentOptions['thumb']))
					$attachIDs[] = $pmAttachmentOptions['thumb'];
			}
			else
			{
				if (in_array('too_large', $pmAttachmentOptions['errors']))
					fatal_lang_error('file_too_big', false, array($modSettings['pmAttachmentSizeLimit']));
				if (in_array('bad_extension', $pmAttachmentOptions['errors']))
					fatal_error($pmAttachmentOptions['name'] . '.<br />' . $txt['pm_cant_upload_type'] . ' ' . $modSettings['pmAttachmentExtensions'] . '.', false);
				if (in_array('directory_full', $pmAttachmentOptions['errors']))
					fatal_lang_error('ran_out_of_space', 'critical');
				if (in_array('bad_filename', $pmAttachmentOptions['errors']))
					fatal_error(basename($pmAttachmentOptions['name']) . '.<br />' . $txt['pm_restricted_filename'] . '.', 'critical');
				if (in_array('taken_filename', $pmAttachmentOptions['errors']))
					fatal_lang_error('filename_exists');
			}
		}
	}

	]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[!empty($_REQUEST['pm_head']) ? (int) $_REQUEST['pm_head'] : 0]]></search>
		<add><![CDATA[, empty($attachIDs) ? array() : $attachIDs]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[function deleteMessages($personal_messages, $folder = null, $owner = null)
{
	global $user_info, $smcFunc]]></search>
		<add><![CDATA[, $sourcedir]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Do the actual deletion.
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}pm_recipients
			SET deleted = {int:is_deleted}
			WHERE id_member IN ({array_int:member_list})
				AND deleted = {int:not_deleted}' . $where,
			array(]]></search>
		<add><![CDATA[
				'blank_string' => '',]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	}

	// Any cached numbers may be wrong now.
	cache_put_data('labelCounts:' . $user_info['id'], null, 720);]]></search>
		<add><![CDATA[		
		// Now that all pm are deleted...
		// Let's find all attachments and delete them also ;)
		foreach ($remove_pms as $pm_id)
		{
			$request = $smcFunc['db_query']('', '
				SELECT id_attach
				FROM {db_prefix}pm_attachments
				WHERE id_pm = {int:id_pm}',
				array(
					'id_pm' => $pm_id,
				)
			);
			
			$remove_attachments = array();
			while ($row = $smcFunc['db_fetch_assoc']($request))
			{
				$remove_attachments[] = $row['id_attach'];
			}
			$smcFunc['db_free_result']($request);

			if (!empty($remove_attachments))
			{
				require_once($sourcedir . '/ManageAttachments.php');
				removePMAttachments(array('id_attach' => $remove_attachments), '', false, true, false);
			}	
		}		
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Now let's get out and loop through the admins.]]></search>
		<add><![CDATA[//
		// PM ATTACHMENTS MOD BEGIN...
		//
			
		// get all attachments sent to this member...
		$request = $smcFunc['db_query']('', '
			SELECT
				pa.id_attach
			FROM {db_prefix}pm_attachments AS pa
				INNER JOIN {db_prefix}personal_messages AS pm ON (pm.id_pm = pa.id_pm)
			WHERE pa.id_pm = {int:id_pm}',
			array(
				'id_pm' => $context['pm_id'],
			)
		);

		$attachIDs = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
			$attachIDs[] = $row['id_attach'];

		$smcFunc['db_free_result']($request);

		//
		// PM ATTACHMENTS MOD END!
		//

		]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Plonk it in the array ;)]]></search>
		<add><![CDATA[//
				// PM Attachments MOD BEGIN...
				//
				if (count($attachIDs) >= 1)
					$report_body .= $txt['pm_report_attachments_sent'];
				//
				// PM Attachments MOD END!
				//
				
				]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[// Send a different email for each language.
		foreach ($messagesToSend as $lang => $message)
			sendpm($message['recipients'], $message['subject'], $message['body']);]]></search>
		<add><![CDATA[//
		// PM ATTACHMENTS MOD BEGIN...
		//
		
		// Send a different email for each language.
		foreach ($messagesToSend as $lang => $message)
			sendpm($message['recipients'], $message['subject'], $message['body'], false, null, 0, $attachIDs, true);

		//
		// PM ATTACHMENTS MOD END!
		//]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[loadLanguage('PersonalMessage+Drafts');]]></search>
		<add><![CDATA[
	loadLanguage('PMAttachments');]]></add>
	</operation>
</file>
<file name="$sourcedir/Subs-Post.php">
	<operation>
		<search position="before"><![CDATA[function sendpm($recipients, $subject, $message, $store_outbox = false, $from = null, $pm_head = 0]]></search>
		<add><![CDATA[, $attachments = array(), $report = false]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Integrated PMs]]></search>
		<add><![CDATA[	//
	// PM Attachments MOD BEGIN
	//
	
	$str_downloads = '';
	$str_attachments = '';

	if(!is_array($attachments))
		$attachments = array();

	if (count($attachments) >= 1)
	{
		$parent_attachments = array();
		
		$request = $smcFunc['db_query']('', '
			SELECT
				id_attach
			FROM {db_prefix}pm_attachments
			WHERE id_attach IN ({array_int:attach_ids})
				AND attachment_type = {int:not_thumb}',
			array(
				'attach_ids' => $attachments,
				'not_thumb' => 0,
			)
		);
		while ($row = $smcFunc['db_fetch_assoc']($request))
		{
			$parent_attachments[] = $row['id_attach'];
		}
		
		$smcFunc['db_free_result']($request);
	
		// obtain string of all attach_ids...
		$str_attachments = implode(',', $parent_attachments);
		$xStr = 0;
		// fill downloads string with 0 for each attachment in pm...
		foreach ($parent_attachments as $attach) {
			$xStr++;
			$str_downloads .= $xStr < count($parent_attachments) ? '0,' : '0';
		}
	}
	//
	// PM Attachments MOD END
	//
		
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[		// If this is new we need to set it part of it's own conversation.]]></search>
		<add><![CDATA[		//
		// PM ATTACHMENTS MOD BEGIN
		//
		
		// Fix the attachments.
		if (!empty($attachments))
			// is it being reported?
			if ($report)
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET pm_report = {int:id_pm}
					WHERE id_attach IN ({array_int:attachment_list})',
					array(
						'attachment_list' => $attachments,
						'id_pm' => $id_pm,
					)
				);
			else
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET id_pm = {int:id_pm}
					WHERE id_attach IN ({array_int:attachment_list})',
					array(
						'attachment_list' => $attachments,
						'id_pm' => $id_pm,
					)
				);

		//
		// PM ATTACHMENTS MOD END
		//
		
]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[$insertRows[] = array($id_pm, $to, in_array($to, $recipients['bcc']) ? 1 : 0, isset($deletes[$to]) ? 1 : 0, 1]]></search>
		<add><![CDATA[, $str_attachments, $str_downloads]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA['id_pm' => 'int', 'id_member' => 'int', 'bcc' => 'int', 'deleted' => 'int', 'is_new' => 'int']]></search>
		<add><![CDATA[, 'attachments' => 'string-255', 'downloads' => 'string-255']]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[$emaildata = loadEmailTemplate($email_template, $replacements, $lang);

		// Off the notification email goes!]]></search>
		<add><![CDATA[
		//
		// PM ATTACHMENTS MOD Begin...
		//
		
		$email_template .= "\n";
		if (!empty($parent_attachments))
		{
			$email_template .= "\n" . $txt['pmattachments_mail'] . "\n";
			
			foreach ($parent_attachments as $attachID)
				$email_template .= $scripturl . '?action=dlpmattach;pm=' . $id_pm . ';attach=' . $attachID . "\n";		
		}

		$email_template .= "\n" . $txt['instant_reply'] . ' ' . $scripturl . '?action=pm;sa=send;f=inbox;pmsg=' . $id_pm . ';quote;u=' . $from['id'];
		
		//
		// PM ATTACHMENTS MOD END!
		//

		]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[if ($loadLang)
		loadLanguage('EmailTemplates', $lang);]]></search>
		<add><![CDATA[if ($loadLang)
	{
		loadLanguage('EmailTemplates', $lang);
		loadLanguage('PMAttachments', $lang);
	}]]></add>
	</operation>
</file>
<file name="$themedir/PersonalMessage.template.php">
	<operation>
		<search position="after"><![CDATA[if ($message['can_report'] || $context['can_send_pm'])
			echo '
				<div class="under_message">';]]></search>
		<add><![CDATA[// Assuming there are attachments...
			if (allowedTo('pm_view_attachments') && !empty($message['attachment'])) 
			{
				echo '
					<div id="post_', $message['id'], '_footer" class="attachments">';
			
				echo '
						<hr width="98%" size="1" class="hrcolor" />
						<div style="overflow: ', $context['browser']['is_firefox'] ? 'visible' : 'auto', '; width: 98%;">';

				foreach ($message['attachment'] as $attachment)
				{
					if ($attachment['is_image'])
					{
						if ($attachment['thumbnail']['has_thumb'])
							echo '
								<a href="', $attachment['href'], ';image" id="link_', $attachment['id'] . (function_exists('highslide_images') ? '" class="highslide" rel="highslide"' : '" onclick="' . $attachment['thumbnail']['javascript']) . '"><img src="', $attachment['thumbnail']['href'], '" alt="' , $attachment['name'] , '" id="thumb_', $attachment['id'], '" border="0" /></a><br />' . ($attachment['is_image'] && function_exists('highslide_images') ? '<div class="highslide-heading">' . $message['subject'] . '</div>' : '');
						else
							echo '
								<img src="' . $attachment['href'] . ';image" alt="" width="' . $attachment['width'] . '" height="' . $attachment['height'] . '" border="0" /><br />';
					}
					echo '
								<a href="' . $attachment['href'] . '"><img src="' . $settings['images_url'] . '/icons/clip.gif" align="middle" alt="*" border="0" />&nbsp;' . $attachment['name'] . '</a>
								<div style="padding-left:1.0em; margin-top:-0.5em;">(', $attachment['size'] . ($attachment['is_image'] ? ', ' . $attachment['real_width'] . 'x' . $attachment['real_height'] : '') . ')</div>';
				}
				echo '
						</div></div>';
			}

			]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[<form action="', $scripturl, '?action=pm;sa=send2"]]></search>
		<add><![CDATA[', allowedTo('pm_post_attachments') ? ' enctype="multipart/form-data"' : '', ']]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Send, Preview, spellcheck buttons.]]></search>
		<add><![CDATA[	// If this post already has attachments on it - give information about them.
	if (!empty($context['current_attachments']))
	{
		echo '
				<dl id="postAttachment">
					<dt>
						', $txt['attached'], ':
					</dt>
					<dd class="smalltext">
						<input type="hidden" name="attach_del[]" value="0" />
						', $txt['uncheck_unwatchd_attach'], ':
					</dd>';
			foreach ($context['current_attachments'] as $attachment)
				echo '
					<dd class="smalltext">
						<label for="attachment_', $attachment['id'], '"><input type="checkbox" id= "attachment_', $attachment['id'], '" name="attach_del[]" value="', $attachment['id'], '"', empty($attachment['unchecked']) ? ' checked="checked"' : '', ' class="input_check" /> ', $attachment['name'], '</label>
					</dd>';
		echo '
				</dl>';
	}

	// Is the user allowed to pm any additional ones? If so give them the boxes to do it!
	if (!empty($context['can_post_attachment']))
	{
		echo '								
							<dl id="postAttachment2">
								<dt>
									', $txt['attach'], ':
								</dt>	
								<dd class="smalltext">
									<input type="file" size="60" name="attachment[]" id="attachment1" class="input_file" /> (<a href="javascript:void(0);" onclick="cleanFileInput(\'attachment1\');">', $txt['clean_attach'], '</a>)';

		// Show more boxes only if they aren't approaching their limit.
		if ($context['num_allowed_attachments'] > 1)
			echo '
									<script language="JavaScript" type="text/javascript"><!-- // --><![', 'CDATA', '[
										var allowed_attachments = ', $context['num_allowed_attachments'], ' - 1;
										var current_attachment = 1;

										function addAttachment()
										{
											if (allowed_attachments <= 0)
												return alert("', $txt['more_attachments_error'], '");

											allowed_attachments = allowed_attachments - 1;
											current_attachment = current_attachment + 1;

											setOuterHTML(document.getElementById("moreAttachments"), \'<dd class="smalltext"><input type="file" size="38" name="attachment[]" id="attachment\' + current_attachment + \'" class="input_file" /> (<a href="javascript:void(0);" onclick="cleanFileInput(\\\'attachment\' + current_attachment + \'\\\');">', $txt['clean_attach'], '</a>)<\' + \'/dd>\' + (allowed_attachments > 0 ? \'<dd class="smalltext" id="moreAttachments"><a href="javascript:void(0);" onclick="addAttachment(); return false;">(', $txt['more_attachments'], ')<\' + \'/a><\' + \'/dd>\' : \'\'));

											return true;
										}
									// ', ']', ']></script>
									</dd>
									<dd class="smalltext" id="moreAttachments"><a href="javascript:void(0);" onclick="addAttachment(); return false;">(', $txt['more_attachments'], ')</a></dd>';

			echo '
						<dd class="smalltext">';

		// Show some useful information such as allowed extensions, maximum size and amount of attachments allowed.
		if (!empty($modSettings['pmAttachmentCheckExtensions']))
			echo '
									', $txt['allowed_types'], ': ', $context['allowed_extensions'], '<br />';

		if (!empty($context['attachment_restrictions']))
			echo '
									', $txt['attach_restrictions'], ' ', implode(', ', $context['attachment_restrictions']), '<br />';

		echo '
						</dd>
					</dl>';
	}

]]></add>
	</operation>	
</file>
</modification>