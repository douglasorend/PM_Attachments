<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
<id>sologhost:pmattachments</id>
<version>1.4</version>

<file name="$boarddir/index.php">
	<operation>
		<search position="before"><![CDATA[		'dlattach' => array('Display.php', 'Download'),]]></search>
		<add><![CDATA[
		'dlpmattach' => array('PersonalMessage.php', 'PMDownload'),]]></add>
	</operation>
</file>
<file name="$sourcedir/Subs.php">
	<operation>
		<search position="end" /><add><![CDATA[

//
// BEGIN PM ATTACHMENTS MOD
//

// Get a PM attachment's encrypted filename.  If $new is true, won't check for file existence.
function getPMAttachmentFilename($filename, $attachment_id, $dir = null, $new = false, $file_hash = '')
{
	global $modSettings, $smcFunc;

	// Just make up a nice hash...
	if ($new)
		return sha1(md5($filename . time()) . mt_rand());

	// Grab the file hash if it wasn't added.
	if ($file_hash === '')
	{
		$request = $smcFunc['db_query']('', '
			SELECT file_hash
			FROM {db_prefix}pm_attachments
			WHERE id_attach = {int:id_attach}',
			array(
				'id_attach' => $attachment_id,
		));

		if ($smcFunc['db_num_rows']($request) === 0)
			return false;

		list ($file_hash) = $smcFunc['db_fetch_row']($request);
		$smcFunc['db_free_result']($request);
	}

	// In case of files from the old system, do a legacy call.
	if (empty($file_hash))
		return getLegacyPMAttachmentFilename($filename, $attachment_id, $dir, $new);

	// Are we using multiple directories?
	if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['pmAttachmentUploadDir']))
			$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);
		$path = $modSettings['pmAttachmentUploadDir'][$dir];
	}
	else
		$path = $modSettings['pmAttachmentUploadDir'];

	return $path . '/' . $attachment_id . '_' . $file_hash;
}
	

function getLegacyPMAttachmentFilename($filename, $attachment_id, $dir = null, $new = false)
{
	global $modSettings;

	// Remove special accented characters - ie. sí.
	$clean_name = strtr($filename, 'ŠŽšžŸÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝàáâãäåçèéêëìíîïñòóôõöøùúûüýÿ', 'SZszYAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy');
	$clean_name = strtr($clean_name, array('Þ' => 'TH', 'þ' => 'th', 'Ð' => 'DH', 'ð' => 'dh', 'ß' => 'ss', 'Œ' => 'OE', 'œ' => 'oe', 'Æ' => 'AE', 'æ' => 'ae', 'µ' => 'u'));

	// Sorry, no spaces, dots, or anything else but letters allowed.
	$clean_name = preg_replace(array('/\s/', '/[^\w_\.\-]/'), array('_', ''), $clean_name);

	$enc_name = $attachment_id . '_' . strtr($clean_name, '.', '_') . md5($clean_name);
	$clean_name = preg_replace('~\.[\.]+~', '.', $clean_name);

	if ($attachment_id == false || ($new && empty($modSettings['pmAttachmentEncryptFilenames'])))
		return $clean_name;
	elseif ($new)
		return $enc_name;

	// Are we using multiple directories?
	if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['pmAttachmentUploadDir']))
			$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);
		$path = $modSettings['pmAttachmentUploadDir'][$dir];
	}
	else
		$path = $modSettings['pmAttachmentUploadDir'];

	if (file_exists($path . '/' . $enc_name))
		$filename = $path . '/' . $enc_name;
	else
		$filename = $path . '/' . $clean_name;

	return $filename;
}

//
// END PM ATTACHMENTS MOD
//

]]></add>
	</operation>
</file>
<file name="$sourcedir/Subs-Post.php">
	<operation>
		<search position="before"><![CDATA[function sendpm($recipients, $subject, $message, $store_outbox = false, $from = null, $pm_head = 0]]></search>
		<add><![CDATA[, $attachments = array(), $report = false]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Integrated PMs]]></search>
		<add><![CDATA[	//
	// PM Attachments MOD BEGIN
	//
	
	$str_downloads = '';
	$str_attachments = '';	
	
	if (count($attachments) >= 1)
	{
		$parent_attachments = array();
		
		$request = $smcFunc['db_query']('', '
			SELECT
				id_attach
			FROM {db_prefix}pm_attachments
			WHERE id_attach IN ({array_int:attach_ids})
				AND attachment_type = {int:not_thumb}',
			array(
				'attach_ids' => $attachments,
				'not_thumb' => 0,
			)
		);
		while ($row = $smcFunc['db_fetch_assoc']($request))
		{
			$parent_attachments[] = $row['id_attach'];
		}
		
		$smcFunc['db_free_result']($request);
	
		// obtain string of all attach_ids...
		$str_attachments = implode(',', $parent_attachments);
		$xStr = 0;
		// fill downloads string with 0 for each attachment in pm...
		foreach ($parent_attachments as $attach) {
			$xStr++;
			$str_downloads .= $xStr < count($parent_attachments) ? '0,' : '0';
		}
	}
	//
	// PM Attachments MOD END
	//
		
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[		// If this is new we need to set it part of it's own conversation.]]></search>
		<add><![CDATA[		//
		// PM ATTACHMENTS MOD BEGIN
		//
		
		// Fix the attachments.
		if (!empty($attachments))
			// is it being reported?
			if ($report)
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET pm_report = {int:id_pm}
					WHERE id_attach IN ({array_int:attachment_list})',
					array(
						'attachment_list' => $attachments,
						'id_pm' => $id_pm,
					)
				);
			else
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET id_pm = {int:id_pm}
					WHERE id_attach IN ({array_int:attachment_list})',
					array(
						'attachment_list' => $attachments,
						'id_pm' => $id_pm,
					)
				);

		//
		// PM ATTACHMENTS MOD END
		//
		
]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[$insertRows[] = array($id_pm, $to, in_array($to, $recipients['bcc']) ? 1 : 0, isset($deletes[$to]) ? 1 : 0, 1]]></search>
		<add><![CDATA[, $str_attachments, $str_downloads]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA['id_pm' => 'int', 'id_member' => 'int', 'bcc' => 'int', 'deleted' => 'int', 'is_new' => 'int']]></search>
		<add><![CDATA[, 'attachments' => 'string-255', 'downloads' => 'string-255']]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[$mailmessage .= "\n\n" . $txt['instant_reply'] . ' ' . $scripturl . '?action=pm;sa=send;f=inbox;pmsg=' . $id_pm . ';quote;u=' . $from['id'];

		// Off the notification email goes!]]></search>
		<add><![CDATA[
		//
		// PM ATTACHMENTS MOD Begin...
		//
		
		$mailmessage .= "\n";
		if (!empty($parent_attachments))
		{
			$mailmessage .= "\n" . $txt['pmattachments_mail'] . "\n";
			
			foreach ($parent_attachments as $attachID)
				$mailmessage .= $scripturl . '?action=dlpmattach;pm=' . $id_pm . ';attach=' . $attachID . "\n";		
		}

		$mailmessage .= "\n" . $txt['instant_reply'] . ' ' . $scripturl . '?action=pm;sa=send;f=inbox;pmsg=' . $id_pm . ';quote;u=' . $from['id'];
		
		//
		// PM ATTACHMENTS MOD END!
		//

		// Off the notification email goes!]]></add>
	</operation>
	<operation>
		<search position="end" /><add><![CDATA[
		
		// !!!
function createPMAttachment(&$pmAttachmentOptions)
{
	global $modSettings, $sourcedir, $smcFunc, $context;

	// [PM] We need to know where this pm attachment is going. [PM]
	if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
	{
		if (!is_array($modSettings['pmAttachmentUploadDir']))
			$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

		// [PM] Just use the current path for temp files. [PM]
		$pmattach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		$id_folder = $modSettings['pmCurrentAttachmentUploadDir'];
	}
	else
	{
		$pmattach_dir = $modSettings['pmAttachmentUploadDir'];
		$id_folder = 1;
	}

	$pmAttachmentOptions['errors'] = array();
	if (!isset($pmAttachmentOptions['pm']))
		$pmAttachmentOptions['pm'] = 0;

	$already_uploaded = preg_match('~^post_tmp_' . $pmAttachmentOptions['sender'] . '_\d+$~', $pmAttachmentOptions['tmp_name']) != 0;
	$file_restricted = @ini_get('open_basedir') != '' && !$already_uploaded;

	if ($already_uploaded)
		$pmAttachmentOptions['tmp_name'] = $pmattach_dir . '/' . $pmAttachmentOptions['tmp_name'];

	// [PM] Make sure the file actually exists... sometimes it doesn't. [PM]
	if ((!$file_restricted && !file_exists($pmAttachmentOptions['tmp_name'])) || (!$already_uploaded && !is_uploaded_file($pmAttachmentOptions['tmp_name'])))
	{
		$pmAttachmentOptions['errors'] = array('could_not_upload');
		return false;
	}
	
	// [PM] These are the only valid image types for SMF. [PM]
	$validImageTypes = array(1 => 'gif', 2 => 'jpeg', 3 => 'png', 5 => 'psd', 6 => 'bmp', 7 => 'tiff', 8 => 'tiff', 9 => 'jpeg', 14 => 'iff');

 	if (!$file_restricted || $already_uploaded)
	{
		$size = @getimagesize($pmAttachmentOptions['tmp_name']);
		list ($pmAttachmentOptions['width'], $pmAttachmentOptions['height']) = $size;

		// [PM] If it's an image get the mime type right. [PM]
		if (empty($pmAttachmentOptions['mime_type']) && $pmAttachmentOptions['width'])
		{
			// [PM] Got a proper mime type? [PM]
			if (!empty($size['mime']))
				$pmAttachmentOptions['mime_type'] = $size['mime'];
			// [PM] Otherwise a valid one? [PM]
			elseif (isset($validImageTypes[$size[2]]))
				$pmAttachmentOptions['mime_type'] = 'image/' . $validImageTypes[$size[2]];
		}
	}

	// PM Attachments BEGIN...  Just here to be sure Subs.php gets loaded.
	require_once($sourcedir . '/Subs.php');
	
	// [PM] Get the hash if no hash has been given yet. [PM]
	if (empty($pmAttachmentOptions['file_hash']))
		$pmAttachmentOptions['file_hash'] = getPMAttachmentFilename($pmAttachmentOptions['name'], false, null, true);

	// [PM] Is the file too big? [PM]
	if (!empty($modSettings['pmAttachmentSizeLimit']) && $pmAttachmentOptions['size'] > $modSettings['pmAttachmentSizeLimit'] * 1024)
		$pmAttachmentOptions['errors'][] = 'too_large';

	if (!empty($modSettings['pmAttachmentCheckExtensions']))
	{
		$allowed = explode(',', strtolower($modSettings['pmAttachmentExtensions']));
		foreach ($allowed as $k => $dummy)
			$allowed[$k] = trim($dummy);

		if (!in_array(strtolower(substr(strrchr($pmAttachmentOptions['name'], '.'), 1)), $allowed))
			$pmAttachmentOptions['errors'][] = 'bad_extension';
	}

	if (!empty($modSettings['pmAttachmentDirSizeLimit']))
	{
		// [PM] Make sure the directory isn't full. [PM]
		$dirSize = 0;
		$dir = @opendir($pmattach_dir) or fatal_lang_error('cant_access_upload_path', 'critical');
		while ($file = readdir($dir))
		{
			if ($file == '.' || $file == '..')
				continue;

			if (preg_match('~^post_tmp_\d+_\d+$~', $file) != 0)
			{
				// [PM] Temp file is more than 5 hours old! [PM]
				if (filemtime($pmattach_dir . '/' . $file) < time() - 18000)
					@unlink($pmattach_dir . '/' . $file);
				continue;
			}

			$dirSize += filesize($pmattach_dir . '/' . $file);
		}
		closedir($dir);

		// [PM] Too big!  Maybe you could zip it or something... [PM]
		if ($pmAttachmentOptions['size'] + $dirSize > $modSettings['pmAttachmentDirSizeLimit'] * 1024)
			$pmAttachmentOptions['errors'][] = 'directory_full';
		// [PM] Soon to be too big - warn the admins... [PM]
		if (!isset($modSettings['pmattachment_full_notified']) && $modSettings['pmAttachmentDirSizeLimit'] > 4000 && $pmAttachmentOptions['size'] + $dirSize > ($modSettings['pmAttachmentDirSizeLimit'] - 2000) * 1024)
		{
			require_once($sourcedir . '/Subs-Admin.php');
			emailAdmins('admin_pm_attachments_full');
			updateSettings(array('pmattachment_full_notified' => 1));
		}
	}

	// [PM] Check if the file already exists.... (for those who do not encrypt their filenames...) [PM]
	if (empty($modSettings['pmAttachmentEncryptFilenames']))
	{
		// [PM] Make sure they aren't trying to upload a nasty file. [PM]
		$disabledFiles = array('con', 'com1', 'com2', 'com3', 'com4', 'prn', 'aux', 'lpt1', '.htaccess', 'index.php');
		if (in_array(strtolower(basename($pmAttachmentOptions['name'])), $disabledFiles))
			$pmAttachmentOptions['errors'][] = 'bad_filename';

		// [PM] Check if there's another file with that name... [PM]
		$request = $smcFunc['db_query']('', '
			SELECT id_attach
			FROM {db_prefix}pm_attachments
			WHERE filename = {string:filename}
			LIMIT 1',
			array(
				'filename' => strtolower($pmAttachmentOptions['name']),
			)
		);
		if ($smcFunc['db_num_rows']($request) > 0)
			$pmAttachmentOptions['errors'][] = 'taken_filename';
		$smcFunc['db_free_result']($request);
	}

	if (!empty($pmAttachmentOptions['errors']))
		return false;

	if (!is_writable($pmattach_dir))
		fatal_lang_error('attachments_no_write', 'critical');

	// [PM] Assuming no-one set the extension let's take a look at it. [PM]
	if (empty($pmAttachmentOptions['fileext']))
	{
		$pmAttachmentOptions['fileext'] = strtolower(strrpos($pmAttachmentOptions['name'], '.') !== false ? substr($pmAttachmentOptions['name'], strrpos($pmAttachmentOptions['name'], '.') + 1) : '');
		if (strlen($pmAttachmentOptions['fileext']) > 8 || '.' . $pmAttachmentOptions['fileext'] == $pmAttachmentOptions['name'])
			$pmAttachmentOptions['fileext'] = '';
	}

	$smcFunc['db_insert']('',
		'{db_prefix}pm_attachments',
		array(
			'id_folder' => 'int', 'id_pm' => 'int', 'filename' => 'string-255', 'file_hash' => 'string-40', 'fileext' => 'string-8',
			'size' => 'int', 'width' => 'int', 'height' => 'int',
			'mime_type' => 'string-20',
		),
		array(
			$id_folder, (int) $pmAttachmentOptions['pm'], $pmAttachmentOptions['name'], $pmAttachmentOptions['file_hash'], $pmAttachmentOptions['fileext'],
			(int) $pmAttachmentOptions['size'], (empty($pmAttachmentOptions['width']) ? 0 : (int) $pmAttachmentOptions['width']), (empty($pmAttachmentOptions['height']) ? '0' : (int) $pmAttachmentOptions['height']),
			(!empty($pmAttachmentOptions['mime_type']) ? $pmAttachmentOptions['mime_type'] : ''),
		),
		array('id_attach')
	);

	$pmAttachmentOptions['id'] = $smcFunc['db_insert_id']('{db_prefix}pm_attachments', 'id_attach');

	$pmAttachmentOptions['destination'] = getPMAttachmentFilename(basename($pmAttachmentOptions['name']), $pmAttachmentOptions['id'], $id_folder, false, $pmAttachmentOptions['file_hash']);

	if ($already_uploaded)
		rename($pmAttachmentOptions['tmp_name'], $pmAttachmentOptions['destination']);
	elseif (!move_uploaded_file($pmAttachmentOptions['tmp_name'], $pmAttachmentOptions['destination']))
		fatal_lang_error('attach_timeout', 'critical');
	// [PM] We couldn't access the file before... [PM]
	elseif ($file_restricted)
	{
		$size = @getimagesize($pmAttachmentOptions['destination']);
		list ($pmAttachmentOptions['width'], $pmAttachmentOptions['height']) = $size;

		// [PM] Have a go at getting the right mime type. [PM]
		if (empty($pmAttachmentOptions['mime_type']) && $pmAttachmentOptions['width'])
		{
			if (!empty($size['mime']))
				$pmAttachmentOptions['mime_type'] = $size['mime'];
			elseif (isset($validImageTypes[$size[2]]))
				$pmAttachmentOptions['mime_type'] = 'image/' . $validImageTypes[$size[2]];
		}

		if (!empty($pmAttachmentOptions['width']) && !empty($pmAttachmentOptions['height']))
			$smcFunc['db_query']('', '
				UPDATE {db_prefix}pm_attachments
				SET
					width = {int:width},
					height = {int:height},
					mime_type = {string:mime_type}
				WHERE id_attach = {int:id_attach}',
				array(
					'width' => (int) $pmAttachmentOptions['width'],
					'height' => (int) $pmAttachmentOptions['height'],
					'id_attach' => $pmAttachmentOptions['id'],
					'mime_type' => empty($pmAttachmentOptions['mime_type']) ? '' : $pmAttachmentOptions['mime_type'],
				)
			);
	}

	// [PM] Attempt to chmod it. [PM]
	@chmod($pmAttachmentOptions['destination'], 0644);

	if (!empty($pmAttachmentOptions['skip_thumbnail']) || (empty($pmAttachmentOptions['width']) && empty($pmAttachmentOptions['height'])))
		return true;

	// [PM] Like thumbnails, do we? [PM]
	if (!empty($modSettings['pmAttachmentThumbnails']) && !empty($modSettings['pmAttachmentThumbWidth']) && !empty($modSettings['pmAttachmentThumbHeight']) && ($pmAttachmentOptions['width'] > $modSettings['pmAttachmentThumbWidth'] || $pmAttachmentOptions['height'] > $modSettings['pmAttachmentThumbHeight']))
	{
		require_once($sourcedir . '/Subs-Graphics.php');
		if (createThumbnail($pmAttachmentOptions['destination'], $modSettings['pmAttachmentThumbWidth'], $modSettings['pmAttachmentThumbHeight']))
		{
			// [PM] Figure out how big we actually made it. [PM]
			$size = @getimagesize($pmAttachmentOptions['destination'] . '_thumb');
			list ($thumb_width, $thumb_height) = $size;

			if (!empty($size['mime']))
				$thumb_mime = $size['mime'];
			elseif (isset($validImageTypes[$size[2]]))
				$thumb_mime = 'image/' . $validImageTypes[$size[2]];
			// [PM] Lord only knows how this happened... [PM]
			else
				$thumb_mime = '';

			$thumb_filename = $pmAttachmentOptions['name'] . '_thumb';
			$thumb_size = filesize($pmAttachmentOptions['destination'] . '_thumb');
			$thumb_file_hash = getPMAttachmentFilename($thumb_filename, false, null, true);

			// [PM] To the database we go! [PM]
			$smcFunc['db_insert']('',
				'{db_prefix}pm_attachments',
				array(
					'id_folder' => 'int', 'id_pm' => 'int', 'attachment_type' => 'int', 'filename' => 'string-255', 'file_hash' => 'string-40', 'fileext' => 'string-8',
					'size' => 'int', 'width' => 'int', 'height' => 'int', 'mime_type' => 'string-20',
				),
				array(
					$id_folder, (int) $pmAttachmentOptions['pm'], 3, $thumb_filename, $thumb_file_hash, $pmAttachmentOptions['fileext'],
					$thumb_size, $thumb_width, $thumb_height, $thumb_mime,
				),
				array('id_attach')
			);
			$pmAttachmentOptions['thumb'] = $smcFunc['db_insert_id']('{db_prefix}pm_attachments', 'id_attach');

			if (!empty($pmAttachmentOptions['thumb']))
			{
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET id_thumb = {int:id_thumb}
					WHERE id_attach = {int:id_attach}',
					array(
						'id_thumb' => $pmAttachmentOptions['thumb'],
						'id_attach' => $pmAttachmentOptions['id'],
					)
				);

				rename($pmAttachmentOptions['destination'] . '_thumb', getPMAttachmentFilename($thumb_filename, $pmAttachmentOptions['thumb'], $id_folder, false, $thumb_file_hash));
			}
		}
	}

	return true;

}

]]></add>
	</operation>
</file>
<file name="$sourcedir/Admin.php">
	<operation>
		<search position="before"><![CDATA[					'permission' => array('manage_attachments'),
					'subsections' => array(
						'browse' => array($txt['attachment_manager_browse']),
						'attachments' => array($txt['attachment_manager_settings']),]]></search>
		<add><![CDATA[
						'pmattachments' => array($txt['pmattachment_manager_settings']),]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[		// Mod authors if you want to be "real freaking good" then add any setting pages for your mod BELOW this line!]]></search>
		<add><![CDATA[
		array('ManagePMAttachmentSettings', 'area=manageattachments;sa=pmattachments'),]]></add>
	</operation>
</file>
<file name="$sourcedir/PersonalMessage.php">
	<operation>
		<search position="before"><![CDATA[// A folder, ie. inbox/sent etc.
function MessageFolder()
{
	global $txt, $scripturl, $modSettings, $context, $subjects_request;
	global $messages_request, $user_info, $recipients, $options, $smcFunc, $memberContext, $user_settings;]]></search>
		<add><![CDATA[
	//
	// PM ATTACHMENTS MOD MessageFolder global...
	//
	global $attachments;
	//
	// PM ATTACHMENTS MOD END!!
	//]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[		// This is pretty much EVERY pm!
		$all_pms = array_merge($pms, $display_pms);
		$all_pms = array_unique($all_pms);]]></search>
		<add><![CDATA[

	//
	// PM ATTACHMENTS BEGIN...
	//

	$attachments = array();

	if (!empty($all_pms))
	{
		// Fetch attachments.
		if (!empty($modSettings['pmAttachmentEnable']) && allowedTo('pm_view_attachments'))
		{
			$request = $smcFunc['db_query']('', '
				SELECT
					pa.id_attach, pa.id_folder, pa.id_pm, pa.pm_report, pa.filename, pa.file_hash, IFNULL(pa.size, 0) AS filesize, pa.downloads,
					pa.width, pa.height' . (empty($modSettings['pmAttachmentShowImages']) || empty($modSettings['pmAttachmentThumbnails']) ? '' : ',
					IFNULL(thumb.id_attach, 0) AS id_thumb, thumb.width AS thumb_width, thumb.height AS thumb_height') . '
				FROM {db_prefix}pm_attachments AS pa' . (empty($modSettings['pmAttachmentShowImages']) || empty($modSettings['pmAttachmentThumbnails']) ? '' : '
					LEFT JOIN {db_prefix}pm_attachments AS thumb ON (thumb.id_attach = pa.id_thumb)') . '
				WHERE pa.attachment_type = {int:attachment_type} AND (pa.id_pm IN ({array_int:pm_list}) OR pa.pm_report IN ({array_int:pm_list}))',
				array(
					'pm_list' => $all_pms,
					'attachment_type' => 0,
				)
			);
			$temp = array();
			while ($row = $smcFunc['db_fetch_assoc']($request))
			{
				$temp[$row['id_attach']] = $row;
				
				if (!empty($row['pm_report']))
					if (!isset($attachments[$row['pm_report']]))
						$attachments[$row['pm_report']] = array();

				if (!isset($attachments[$row['id_pm']]))
					$attachments[$row['id_pm']] = array();
			}
			$smcFunc['db_free_result']($request);

			// This is better than sorting it with the query...
			ksort($temp);

			foreach ($temp as $row) {
				if (!empty($row['pm_report']))
					$attachments[$row['pm_report']][] = $row;
				
				$attachments[$row['id_pm']][] = $row;
			}
		}

	}
	//
	// PM ATTACHMENTS END!!
	//]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Get a personal message for the theme.  (used to save memory.)
function prepareMessageContext($type = 'subject', $reset = false)
{
	global $txt, $scripturl, $modSettings, $context, $messages_request, $memberContext, $recipients, $smcFunc;
	global $user_info, $subjects_request;]]></search>
		<add><![CDATA[
	
	//
	// PM ATTACHMENTS MOD prepareMessageContext global...
	//
	global $attachments;
	//
	// PM ATTACHMENTS MOD END!
	//]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[	// Send the array.
	$output = array(
		'alternate' => $counter % 2,]]></search>
		<add><![CDATA[	// Send the array.
	$output = array(
		'attachment' => loadPMAttachmentContext($message['id_pm']),
		'alternate' => $counter % 2,]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Set the title...
	$context['page_title'] = $txt['send_message'];]]></search>
		<add><![CDATA[
	
	// Clean up and Clear any attachments that may be in the session...
	if (!empty($_SESSION['temp_pm_attachments']))
	{
		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// Just use the current path for temp files.
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];
		
		foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
		{
			unset($_SESSION['temp_pm_attachments'][$attachID]);
			@unlink($current_attach_dir . '/' . $attachID);
		}
	}]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Set the defaults...
	$context['subject'] = $form_subject != '' ? $form_subject : $txt['no_subject'];]]></search>
		<add><![CDATA[	// Handle the Attachment info...
	$context['num_allowed_attachments'] = empty($modSettings['attachmentNumPerPMLimit']) ? 50 : $modSettings['attachmentNumPerPMLimit'];
	$context['can_post_attachment'] = !empty($modSettings['pmAttachmentEnable']) && $modSettings['pmAttachmentEnable'] == 1 && allowedTo('pm_post_attachments') && $context['num_allowed_attachments'] > 0 ? 1 : 0;

]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[	// Store the ID for old compatibility.
	$context['post_box_name'] = $editorOptions['id'];

	$context['bcc_value'] = '';]]></search>
		<add><![CDATA[

	// If the user can post attachments prepare the warning labels.
	if (!empty($context['can_post_attachment']))
	{
		$context['allowed_extensions'] = strtr($modSettings['pmAttachmentExtensions'], array(',' => ', '));
		$context['attachment_restrictions'] = array();
		$attachmentRestrictionTypes = array('attachmentNumPerPMLimit', 'attachmentPMLimit', 'pmAttachmentSizeLimit');
		foreach ($attachmentRestrictionTypes as $type)
			if (!empty($modSettings[$type]))
				$context['attachment_restrictions'][] = sprintf($txt['attach_restrict_' . $type], $modSettings[$type]);
	}]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	$context['menu_data_' . $context['pm_menu_id']]['current_area'] = 'send';

	if (!WIRELESS)
		$context['sub_template'] = 'send';]]></search>
		<add><![CDATA[	checkSession('request');

]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Set everything up like before....]]></search>
		<add><![CDATA[
	// An array to hold all the attachments for this pm.
	$context['current_attachments'] = array();
	
	if (allowedTo('pm_post_attachments'))
	{
		if (empty($_SESSION['temp_pm_attachments']))
			$_SESSION['temp_pm_attachments'] = array();

		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// Just use the current path for temp files.
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];

		$quantity = 0;
		$total_size = 0;

		$temp_start = 0;

		if (!empty($_SESSION['temp_pm_attachments']))
			foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
			{
				$temp_start++;

				if (preg_match('~^post_tmp_' . $user_info['id'] . '_\d+$~', $attachID) == 0)
				{
					unset($_SESSION['temp_pm_attachments'][$attachID]);
					continue;
				}

				if (!empty($_POST['attach_del']) && !in_array($attachID, $_POST['attach_del']))
				{
					$deleted_attachments = true;
					unset($_SESSION['temp_pm_attachments'][$attachID]);
					@unlink($current_attach_dir . '/' . $attachID);
					continue;
				}

				$quantity++;
				$total_size += filesize($current_attach_dir . '/' . $attachID);

				$context['current_attachments'][] = array(
					'name' => $name,
					'id' => $attachID,
				);
			}

		if (!empty($_POST['attach_del']))
		{
			$del_temp = array();
			foreach ($_POST['attach_del'] as $i => $dummy)
				$del_temp[$i] = (int) $dummy;

			foreach ($context['current_attachments'] as $k => $dummy)
				if (!in_array($dummy['id'], $del_temp))
				{
					$context['current_attachments'][$k]['unchecked'] = true;
					$deleted_attachments = !isset($deleted_attachments) || is_bool($deleted_attachments) ? 1 : $deleted_attachments + 1;
					$quantity--;
				}
		}

		if (!empty($_FILES['attachment']))
			foreach ($_FILES['attachment']['tmp_name'] as $n => $dummy)
			{
				if ($_FILES['attachment']['name'][$n] == '')
					continue;

				if (!is_uploaded_file($_FILES['attachment']['tmp_name'][$n]) || (@ini_get('open_basedir') == '' && !file_exists($_FILES['attachment']['tmp_name'][$n])))
					fatal_lang_error('attach_timeout', 'critical');

				if (!empty($modSettings['pmAttachmentSizeLimit']) && $_FILES['attachment']['size'][$n] > $modSettings['pmAttachmentSizeLimit'] * 1024)
					fatal_lang_error('file_too_big', false, array($modSettings['pmAttachmentSizeLimit']));

				$quantity++;
				if (!empty($modSettings['attachmentNumPerPMLimit']) && $quantity > $modSettings['attachmentNumPerPMLimit'])
					fatal_lang_error('attachments_limit_per_post', false, array($modSettings['attachmentNumPerPMLimit']));

				$total_size += $_FILES['attachment']['size'][$n];
				if (!empty($modSettings['attachmentPMLimit']) && $total_size > $modSettings['attachmentPMLimit'] * 1024)
					fatal_lang_error('file_too_big', false, array($modSettings['attachmentPMLimit']));

				if (!empty($modSettings['pmAttachmentCheckExtensions']))
				{
					if (!in_array(strtolower(substr(strrchr($_FILES['attachment']['name'][$n], '.'), 1)), explode(',', strtolower($modSettings['pmAttachmentExtensions']))))
						fatal_error($_FILES['attachment']['name'][$n] . '.<br />' . $txt['pm_cant_upload_type'] . ' ' . $modSettings['pmAttachmentExtensions'] . '.', false);
				}

				if (!empty($modSettings['pmAttachmentDirSizeLimit']))
				{
					// Make sure the directory isn't full.
					$dirSize = 0;
					$dir = @opendir($current_attach_dir) or fatal_lang_error('cant_access_upload_path', 'critical');
					while ($file = readdir($dir))
					{
						if ($file == '.' || $file == '..')
							continue;

						if (preg_match('~^post_tmp_\d+_\d+$~', $file) != 0)
						{
							// Temp file is more than 5 hours old!
							if (filemtime($current_attach_dir . '/' . $file) < time() - 18000)
								@unlink($current_attach_dir . '/' . $file);
							continue;
						}

						$dirSize += filesize($current_attach_dir . '/' . $file);
					}
					closedir($dir);

					// Too big!  Maybe you could zip it or something...
					if ($_FILES['attachment']['size'][$n] + $dirSize > $modSettings['pmAttachmentDirSizeLimit'] * 1024)
						fatal_lang_error('ran_out_of_space');
				}

				if (!is_writable($current_attach_dir))
					fatal_lang_error('attachments_no_write', 'critical');

				$attachID = 'post_tmp_' . $user_info['id'] . '_' . $temp_start++;
				$_SESSION['temp_pm_attachments'][$attachID] = basename($_FILES['attachment']['name'][$n]);
				$context['current_attachments'][] = array(
					'name' => basename($_FILES['attachment']['name'][$n]),
					'id' => $attachID,
				);

				$destName = $current_attach_dir . '/' . $attachID;

				if (!move_uploaded_file($_FILES['attachment']['tmp_name'][$n], $destName))
					fatal_lang_error('attach_timeout', 'critical');
				@chmod($destName, 0644);
			}
	}

]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	$context['copy_to_outbox'] = !empty($_REQUEST['outbox']);
	$context['reply'] = !empty($_REQUEST['replied_to']);]]></search>
		<add><![CDATA[		
	$context['num_allowed_attachments'] = empty($modSettings['attachmentNumPerPMLimit']) ? 50 : min($modSettings['attachmentNumPerPMLimit'] - count($context['current_attachments']) + (isset($deleted_attachments) ? $deleted_attachments : 0), $modSettings['attachmentNumPerPMLimit']);		

	$context['can_post_attachment'] = !empty($modSettings['pmAttachmentEnable']) && $modSettings['pmAttachmentEnable'] == 1 && allowedTo('pm_post_attachments') && $context['num_allowed_attachments'] > 0 ? 1 : 0;	
	
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	// Check whether we need to show the code again.]]></search>
		<add><![CDATA[
	// If the user can post attachments prepare the warning labels.
	if (!empty($context['can_post_attachment']))
	{
		$context['allowed_extensions'] = strtr($modSettings['pmAttachmentExtensions'], array(',' => ', '));
		$context['attachment_restrictions'] = array();
		$attachmentRestrictionTypes = array('attachmentNumPerPMLimit', 'attachmentPMLimit', 'pmAttachmentSizeLimit');
		foreach ($attachmentRestrictionTypes as $type)
			if (!empty($modSettings[$type]))
				$context['attachment_restrictions'][] = sprintf($txt['attach_restrict_' . $type], $modSettings[$type]);
	}

]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[	// Do the actual sending of the PM.
	if (!empty($recipientList['to']) || !empty($recipientList['bcc']))
		$context['send_log'] = sendpm($recipientList, $_REQUEST['subject'], $_REQUEST['message'], !empty($_REQUEST['outbox']), null, !empty($_REQUEST['pm_head']) ? (int) $_REQUEST['pm_head'] : 0);]]></search>
		<add><![CDATA[	if (isset($_FILES['attachment']['name']) || !empty($_SESSION['temp_pm_attachments']))
	{	
		// Verify they can post them (double checking for guests).
		if (!allowedTo('pm_post_attachments') || $context['user']['is_guest'])
			fatal_error($txt['pm_attach_not_allowed'], false);
		

		// Make sure we're uploading to the right place.
		if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		{
			if (!is_array($modSettings['pmAttachmentUploadDir']))
				$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

			// The current directory, of course!
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
		}
		else
			$current_attach_dir = $modSettings['pmAttachmentUploadDir'];

		$quantity = 0;
		$total_size = 0;

	if (!empty($_SESSION['temp_pm_attachments']))
		foreach ($_SESSION['temp_pm_attachments'] as $attachID => $name)
				{
					if (preg_match('~^post_tmp_' . $user_info['id'] . '_\d+$~', $attachID) == 0)
						continue;
	
					if (!empty($_POST['attach_del']) && !in_array($attachID, $_POST['attach_del']))
					{
						unset($_SESSION['temp_pm_attachments'][$attachID]);
						@unlink($current_attach_dir . '/' . $attachID);
						continue;
					}
	
					$_FILES['attachment']['tmp_name'][] = $attachID;
					$_FILES['attachment']['name'][] = $name;
					$_FILES['attachment']['size'][] = filesize($current_attach_dir . '/' . $attachID);
					list ($_FILES['attachment']['width'][], $_FILES['attachment']['height'][]) = @getimagesize($current_attach_dir . '/' . $attachID);
	
					unset($_SESSION['temp_pm_attachments'][$attachID]);
				}
		
		if (!isset($_FILES['attachment']['name']))
			$_FILES['attachment']['tmp_name'] = array();

		$attachIDs = array();
		foreach ($_FILES['attachment']['tmp_name'] as $n => $dummy)
		{
			if ($_FILES['attachment']['name'][$n] == '')
				continue;

			// Have we reached the maximum number of files we are allowed?
			$quantity++;
			if (!empty($modSettings['attachmentNumPerPMLimit']) && $quantity > $modSettings['attachmentNumPerPMLimit'])
				fatal_lang_error('attachments_limit_per_post', false, array($modSettings['attachmentNumPerPMLimit']));

			// Check the total upload size for this post...
			$total_size += $_FILES['attachment']['size'][$n];
			if (!empty($modSettings['attachmentPMLimit']) && $total_size > $modSettings['attachmentPMLimit'] * 1024)
				fatal_lang_error('file_too_big', false, array($modSettings['attachmentPMLimit']));

			$pmAttachmentOptions = array(
				'pm' => 0,
				'sender' => $user_info['id'],
				'name' => $_FILES['attachment']['name'][$n],
				'tmp_name' => $_FILES['attachment']['tmp_name'][$n],
				'size' => $_FILES['attachment']['size'][$n],
			);

			require_once($sourcedir . '/Subs-Post.php');

			if (createPMAttachment($pmAttachmentOptions))
			{
				$attachIDs[] = $pmAttachmentOptions['id'];
				if (!empty($pmAttachmentOptions['thumb']))
					$attachIDs[] = $pmAttachmentOptions['thumb'];
			}
			else
			{
				if (in_array('too_large', $pmAttachmentOptions['errors']))
					fatal_lang_error('file_too_big', false, array($modSettings['pmAttachmentSizeLimit']));
				if (in_array('bad_extension', $pmAttachmentOptions['errors']))
					fatal_error($pmAttachmentOptions['name'] . '.<br />' . $txt['pm_cant_upload_type'] . ' ' . $modSettings['pmAttachmentExtensions'] . '.', false);
				if (in_array('directory_full', $pmAttachmentOptions['errors']))
					fatal_lang_error('ran_out_of_space', 'critical');
				if (in_array('bad_filename', $pmAttachmentOptions['errors']))
					fatal_error(basename($pmAttachmentOptions['name']) . '.<br />' . $txt['pm_restricted_filename'] . '.', 'critical');
				if (in_array('taken_filename', $pmAttachmentOptions['errors']))
					fatal_lang_error('filename_exists');
			}
		}
	}

	// Do the actual sending of the PM.
	if (!empty($recipientList['to']) || !empty($recipientList['bcc']))	
		$context['send_log'] = sendpm($recipientList, $_REQUEST['subject'], $_REQUEST['message'], !empty($_REQUEST['outbox']), null, !empty($_REQUEST['pm_head']) ? (int) $_REQUEST['pm_head'] : 0, empty($attachIDs) ? array() : $attachIDs);]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[// Delete the specified personal messages.
function deleteMessages($personal_messages, $folder = null, $owner = null)
{
	global $user_info, $smcFunc]]></search>
		<add><![CDATA[, $sourcedir]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[		// Do the actual deletion.
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}pm_recipients
			SET deleted = {int:is_deleted}
			WHERE id_member IN ({array_int:member_list})
				AND deleted = {int:not_deleted}' . $where,
			array(
				'member_list' => $owner,
				'is_deleted' => 1,
				'not_deleted' => 0,
				'pm_list' => $personal_messages !== null ? array_unique($personal_messages) : array(),
			)
		);
	}]]></search>
		<add><![CDATA[		// Do the actual deletion.
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}pm_recipients
			SET deleted = {int:is_deleted}, attachments = {string:blank_string}, downloads = {string:blank_string}
			WHERE id_member IN ({array_int:member_list})
				AND deleted = {int:not_deleted}' . $where,
			array(
				'blank_string' => '',
				'member_list' => $owner,
				'is_deleted' => 1,
				'not_deleted' => 0,
				'pm_list' => $personal_messages !== null ? array_unique($personal_messages) : array(),
			)
		);
	}]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[	}

	// Any cached numbers may be wrong now.
	cache_put_data('labelCounts:' . $user_info['id'], null, 720);]]></search>
		<add><![CDATA[		
		// Now that all pm are deleted...
		// Let's find all attachments and delete them also ;)
		foreach ($remove_pms as $pm_id)
		{
			$request = $smcFunc['db_query']('', '
				SELECT id_attach
				FROM {db_prefix}pm_attachments
				WHERE id_pm = {int:id_pm}',
				array(
					'id_pm' => $pm_id,
				)
			);
			
			$remove_attachments = array();
			while ($row = $smcFunc['db_fetch_assoc']($request))
			{
				$remove_attachments[] = $row['id_attach'];
			}
			$smcFunc['db_free_result']($request);

			if (!empty($remove_attachments))
			{
				require_once($sourcedir . '/ManageAttachments.php');
				removePMAttachments(array('id_attach' => $remove_attachments), '', false, true, false);
			}	
		}		
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Now let's get out and loop through the admins.]]></search>
		<add><![CDATA[//
		// PM ATTACHMENTS MOD BEGIN...
		//
			
		// get all attachments sent to this member...
		$request = $smcFunc['db_query']('', '
			SELECT
				pa.id_attach
			FROM {db_prefix}pm_attachments AS pa
				INNER JOIN {db_prefix}personal_messages AS pm ON (pm.id_pm = pa.id_pm)
			WHERE pa.id_pm = {int:id_pm}',
			array(
				'id_pm' => $context['pm_id'],
			)
		);

		$attachIDs = array();
		while ($row = $smcFunc['db_fetch_assoc']($request))
			$attachIDs[] = $row['id_attach'];

		$smcFunc['db_free_result']($request);

		//
		// PM ATTACHMENTS MOD END!
		//

		]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[// Plonk it in the array ;)]]></search>
		<add><![CDATA[//
				// PM Attachments MOD BEGIN...
				//
				if (count($attachIDs) >= 1)
					$report_body .= $txt['pm_report_attachments_sent'];
				//
				// PM Attachments MOD END!
				//
				
				]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[// Send a different email for each language.
		foreach ($messagesToSend as $lang => $message)
			sendpm($message['recipients'], $message['subject'], $message['body']);]]></search>
		<add><![CDATA[//
		// PM ATTACHMENTS MOD BEGIN...
		//
		
		// Send a different email for each language.
		foreach ($messagesToSend as $lang => $message)
			sendpm($message['recipients'], $message['subject'], $message['body'], false, null, 0, $attachIDs, true);

		//
		// PM ATTACHMENTS MOD END!
		//]]></add>
	</operation>
	<operation>
		<search position="end" /><add><![CDATA[
// get Individual user PM Attachment Downloads
function userDownloads($id_pm, $id_attach, $id_user)
{
	global $smcFunc;

	// How many downloads does this user have?
	$request = $smcFunc['db_query']('', '
		SELECT attachments, downloads
		FROM {db_prefix}pm_recipients
		WHERE id_pm = {int:id_pm}
			AND id_member = {int:id_member}
		LIMIT 1',
		array(
			'id_pm' => $id_pm,
			'id_member' => $id_user,
		)
	);
	list ($attach, $downs) = $smcFunc['db_fetch_row']($request);

	$smcFunc['db_free_result']($request);

	$pmr_attach = explode(',', $attach);
	$pmr_downs = explode(',', $downs);

	foreach ($pmr_attach as $key => $value) {
		$attachint = intval($value);
		
		if ($attachint == $id_attach) // found attach id in here...														
				$user_downloads = $pmr_downs[$key];
	}
	$pmr_attach = array_values($pmr_attach);
	$pmr_downs = array_values($pmr_downs);

	// Must be the user who sent it and is viewing their sent folder, let them see total downloads...
	if (empty($user_downloads))
	{
		$request = $smcFunc['db_query']('', '
			SELECT pa.downloads, pm.id_member_from
			FROM {db_prefix}pm_attachments AS pa
			INNER JOIN {db_prefix}personal_messages AS pm ON (pm.id_pm = pa.id_pm)
			WHERE pa.id_attach = {int:id_attach}
				AND pa.id_pm = {int:id_pm}
				AND pa.attachment_type = {int:not_thumb}
			LIMIT 1',
			array(
				'id_attach' => $id_attach,
				'id_pm' => $id_pm,
				'not_thumb' => 0,
			)
		);
		list ($downloads, $member_from) = $smcFunc['db_fetch_row']($request);
	
		$smcFunc['db_free_result']($request);

		if ($member_from == $id_user)
			$user_downloads = $downloads;
	}

	if (empty($user_downloads))
		$user_downloads = '0';

	return $user_downloads;
}



// Download a PM attachment.
function PMDownload()
{
	global $txt, $modSettings, $user_info, $scripturl, $context, $sourcedir, $smcFunc;

	// No guests allowed!
	is_not_guest();

	// Make sure some attachment was requested!
	if (!isset($_REQUEST['attach']) && !$user_info['is_admin'])
		fatal_lang_error('no_access', false);
		
	$_REQUEST['pm'] = isset($_REQUEST['pm']) ? (int) $_REQUEST['pm'] : fatal_lang_error('no_access', false);

	$_REQUEST['attach'] = isset($_REQUEST['attach']) ? (int) $_REQUEST['attach'] : fatal_lang_error('no_access', false);

	isAllowedTo('pm_view_attachments');

	// lets get the id_member_from first...
	$request2 = $smcFunc['db_query']('', '
		SELECT id_member_from
		FROM {db_prefix}personal_messages
		WHERE id_pm = {int:id_pm}',
		array(
			'id_pm' => $_REQUEST['pm'],
		)
	);

	list ($member_from) = $smcFunc['db_fetch_row']($request2);
	
	$smcFunc['db_free_result']($request2);	
	
	$sent = !empty($member_from) && $user_info['id'] == $member_from ? 1 : 0;

	// Make sure this attachment is in the PM!  Or was it reported?
	$request = $smcFunc['db_query']('', '
		SELECT pa.id_folder, pa.filename, pa.file_hash, pa.fileext, pa.id_attach, pa.attachment_type, pa.mime_type, pa.id_pm, pa.pm_report' . (empty($sent) ? ', pmr.attachments, pmr.downloads' : '') . '
		FROM {db_prefix}pm_attachments AS pa
			INNER JOIN {db_prefix}personal_messages AS pm ON ((pm.id_pm = pa.pm_report) OR (pm.id_pm = pa.id_pm'
			 . (!empty($sent) ? ' AND pm.id_member_from = {int:id_member}))' : ')) INNER JOIN {db_prefix}pm_recipients AS pmr ON (((pmr.id_pm = pa.id_pm) OR (pmr.id_pm = pa.pm_report)) AND pmr.id_member = {int:id_member})') . '
		WHERE pa.id_attach = {int:attach}',
		array(
			'attach' => $_REQUEST['attach'],
			'id_member' => empty($sent) ? $user_info['id'] : $member_from,
			'id_pm_report' => $_REQUEST['pm'],
		)
	);

	if ($smcFunc['db_num_rows']($request) == 0)
		fatal_lang_error('no_access', false);


if (empty($sent))
	list ($id_folder, $real_filename, $file_hash, $file_ext, $id_attach, $attachment_type, $mime_type, $id_pm, $id_pm_report, $pmrattachments, $pmrdownloads) = $smcFunc['db_fetch_row']($request);
else
	list ($id_folder, $real_filename, $file_hash, $file_ext, $id_attach, $attachment_type, $mime_type, $id_pm, $id_pm_report) = $smcFunc['db_fetch_row']($request);
	
	$smcFunc['db_free_result']($request);
	
	// Update the download counters (unless it's a thumbnail).
	if ($attachment_type != 3) {
		// Main download counter
		$smcFunc['db_query']('attach_download_increase', '
			UPDATE LOW_PRIORITY {db_prefix}pm_attachments
			SET downloads = downloads + 1
			WHERE id_attach = {int:id_attach}',
			array(
				'id_attach' => $id_attach,
			)
		);
		

		// Update the Individual download counter if not downloading attachments through sent folder ofcourse...
		if (empty($sent)) 
		{
			$pmr_attach = explode(',', $pmrattachments);
			$pmr_downs = explode(',', $pmrdownloads);
			
			// which 1 is it?
			foreach ($pmr_attach as $key => $value) {
				$attachint = intval($value);				
				if ($attachint == $id_attach) // found attach id in here...														
						$pmr_downs[$key] = $pmr_downs[$key]+1;
			}
			
			$smcFunc['db_query']('', '
			UPDATE LOW_PRIORITY {db_prefix}pm_recipients
				SET downloads = {string:downs}
				WHERE id_pm = {int:id_pm} AND
				id_member = {int:id_member}',
				array(
					'downs' => implode(',', $pmr_downs),
					'id_pm' => !empty($id_pm_report) ? $id_pm_report : $id_pm,
					'id_member' => $user_info['id'],
				)
			);
		}

	}
	
	$filename = getPMAttachmentFilename($real_filename, $_REQUEST['attach'], $id_folder, false, $file_hash);

	// This is done to clear any output that was made before now. (would use ob_clean(), but that's PHP 4.2.0+...)
	ob_end_clean();
	if (!empty($modSettings['enableCompressedOutput']) && @version_compare(PHP_VERSION, '4.2.0') >= 0 && @filesize($filename) <= 4194304)
		@ob_start('ob_gzhandler');
	else
	{
		ob_start();
		header('Content-Encoding: none');
	}

	// No point in a nicer message, because this is supposed to be an attachment anyway...
	if (!file_exists($filename))
	{
		loadLanguage('Errors');

		header('HTTP/1.0 404 ' . $txt['attachment_not_found']);
		header('Content-Type: text/plain; charset=' . (empty($context['character_set']) ? 'ISO-8859-1' : $context['character_set']));

		// We need to die like this *before* we send any anti-caching headers as below.
		die('404 - ' . $txt['attachment_not_found']);
	}

	// If it hasn't been modified since the last time this attachement was retrieved, there's no need to display it again.
	if (!empty($_SERVER['HTTP_IF_MODIFIED_SINCE']))
	{
		list($modified_since) = explode(';', $_SERVER['HTTP_IF_MODIFIED_SINCE']);
		if (strtotime($modified_since) >= filemtime($filename))
		{
			ob_end_clean();

			// Answer the question - no, it hasn't been modified ;).
			header('HTTP/1.1 304 Not Modified');
			exit;
		}
	}

	// Check whether the ETag was sent back, and cache based on that...
	$file_md5 = '"' . md5_file($filename) . '"';
	if (!empty($_SERVER['HTTP_IF_NONE_MATCH']) && strpos($_SERVER['HTTP_IF_NONE_MATCH'], $file_md5) !== false)
	{
		ob_end_clean();

		header('HTTP/1.1 304 Not Modified');
		exit;
	}

	// Send the attachment headers.
	header('Pragma: ');
	if (!$context['browser']['is_gecko'])
		header('Content-Transfer-Encoding: binary');
	header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 525600 * 60) . ' GMT');
	header('Last-Modified: ' . gmdate('D, d M Y H:i:s', filemtime($filename)) . ' GMT');
	header('Accept-Ranges: bytes');
	header('Connection: close');
	header('ETag: ' . $file_md5);

	// Does this have a mime type?
	if ($mime_type && (isset($_REQUEST['image']) || !in_array($file_ext, array('jpg', 'gif', 'jpeg', 'x-ms-bmp', 'png', 'psd', 'tiff', 'iff'))))
		header('Content-Type: ' . $mime_type);
	else
	{
		header('Content-Type: ' . ($context['browser']['is_ie'] || $context['browser']['is_opera'] ? 'application/octetstream' : 'application/octet-stream'));
		if (isset($_REQUEST['image']))
			unset($_REQUEST['image']);
	}

	if (!isset($_REQUEST['image']))
	{
		// Convert the file to UTF-8, cuz most browsers dig that.
		$utf8name = !$context['utf8'] && function_exists('iconv') ? iconv($context['character_set'], 'UTF-8', $real_filename) : (!$context['utf8'] && function_exists('mb_convert_encoding') ? mb_convert_encoding($real_filename, 'UTF-8', $context['character_set']) : $real_filename);
		$fixchar = create_function('$n', '
			if ($n < 32)
				return \'\';
			elseif ($n < 128)
				return chr($n);
			elseif ($n < 2048)
				return chr(192 | $n >> 6) . chr(128 | $n & 63);
			elseif ($n < 65536)
				return chr(224 | $n >> 12) . chr(128 | $n >> 6 & 63) . chr(128 | $n & 63);
			else
				return chr(240 | $n >> 18) . chr(128 | $n >> 12 & 63) . chr(128 | $n >> 6 & 63) . chr(128 | $n & 63);');

		// Different browsers like different standards...
		if ($context['browser']['is_firefox'])
			header('Content-Disposition: attachment; filename*="UTF-8\'\'' . preg_replace('~&#(\d{3,8});~e', '$fixchar(\'$1\')', $utf8name) . '"');

		elseif ($context['browser']['is_opera'])
			header('Content-Disposition: attachment; filename="' . preg_replace('~&#(\d{3,8});~e', '$fixchar(\'$1\')', $utf8name) . '"');

		elseif ($context['browser']['is_ie'])
			header('Content-Disposition: attachment; filename="' . urlencode(preg_replace('~&#(\d{3,8});~e', '$fixchar(\'$1\')', $utf8name)) . '"');

		else
			header('Content-Disposition: attachment; filename="' . $utf8name . '"');
	}

	// If this has an "image extension" - but isn't actually an image - then ensure it isn't cached cause of silly IE.
	if (!isset($_REQUEST['image']) && in_array($file_ext, array('gif', 'jpg', 'bmp', 'png', 'jpeg', 'tiff')))
		header('Cache-Control: no-cache');
	else
		header('Cache-Control: max-age=' . (525600 * 60) . ', private');

	if (empty($modSettings['enableCompressedOutput']) || filesize($filename) > 4194304)
		header('Content-Length: ' . filesize($filename));

	// Try to buy some time...
	@set_time_limit(0);

	// For text files.....
	if (!isset($_REQUEST['image']) && in_array($file_ext, array('txt', 'css', 'htm', 'html', 'php', 'xml')))
	{
		// We need to check this isn't unicode before we start messing around with it!
		$fp = fopen($filename, 'rb');
		$header = fread($fp, 2);
		fclose($fp);

		if ($header != chr(255).chr(254) && $header != chr(254).chr(255))
		{
			if (strpos($_SERVER['HTTP_USER_AGENT'], 'Windows') !== false)
				$callback = create_function('$buffer', 'return preg_replace(\'~[\r]?\n~\', "\r\n", $buffer);');
			elseif (strpos($_SERVER['HTTP_USER_AGENT'], 'Mac') !== false)
				$callback = create_function('$buffer', 'return preg_replace(\'~[\r]?\n~\', "\r", $buffer);');
			else
				$callback = create_function('$buffer', 'return preg_replace(\'~\r~\', "\r\n", $buffer);');
		}
	}

	// Since we don't do output compression for files this large...
	if (filesize($filename) > 4194304)
	{
		// Forcibly end any output buffering going on.
		if (function_exists('ob_get_level'))
		{
			while (@ob_get_level() > 0)
				@ob_end_clean();
		}
		else
		{
			@ob_end_clean();
			@ob_end_clean();
			@ob_end_clean();
		}

		$fp = fopen($filename, 'rb');
		while (!feof($fp))
		{
			if (isset($callback))
				echo $callback(fread($fp, 8192));
			else
				echo fread($fp, 8192);
			flush();
		}
		fclose($fp);
	}
	// On some of the less-bright hosts, readfile() is disabled.  It's just a faster, more byte safe, version of what's in the if.
	elseif (isset($callback) || @readfile($filename) == null)
		echo isset($callback) ? $callback(file_get_contents($filename)) : file_get_contents($filename);

	obExit(false);

}

function loadPMAttachmentContext($id_pm)
{
	global $attachments, $modSettings, $txt, $scripturl, $sourcedir, $smcFunc, $user_info, $attachmentData;

	// Set up the attachment info - based on code by Meriadoc.
	$attachmentData = array();

	if (isset($attachments[$id_pm]) && !empty($modSettings['pmAttachmentEnable']))
	{
		foreach ($attachments[$id_pm] as $i => $attachment)
		{
			$attachmentData[$i] = array(
				'id' => $attachment['id_attach'],
				'name' => preg_replace('~&amp;#(\\d{1,7}|x[0-9a-fA-F]{1,6});~', '&#\\1;', htmlspecialchars($attachment['filename'])),
				'downloads' => userDownloads($id_pm, $attachment['id_attach'], $user_info['id']),
				'size' => round($attachment['filesize'] / 1024, 2) . ' ' . $txt['kilobyte'],
				'byte_size' => $attachment['filesize'],
				'href' => $scripturl . '?action=dlpmattach;pm=' . $id_pm . ';attach=' . $attachment['id_attach'],
				'link' => '<a href="' . $scripturl . '?action=dlattach;pm=' . $id_pm . ';attach=' . $attachment['id_attach'] . '">' . htmlspecialchars($attachment['filename']) . '</a>',
				'is_image' => !empty($attachment['width']) && !empty($attachment['height']) && !empty($modSettings['pmAttachmentShowImages']),
			);

			if (!$attachmentData[$i]['is_image'])
				continue;

			$attachmentData[$i]['real_width'] = $attachment['width'];
			$attachmentData[$i]['width'] = $attachment['width'];
			$attachmentData[$i]['real_height'] = $attachment['height'];
			$attachmentData[$i]['height'] = $attachment['height'];

			// Let's see, do we want thumbs?
			if (!empty($modSettings['pmAttachmentThumbnails']) && !empty($modSettings['pmAttachmentThumbWidth']) && !empty($modSettings['pmAttachmentThumbHeight']) && ($attachment['width'] > $modSettings['pmAttachmentThumbWidth'] || $attachment['height'] > $modSettings['pmAttachmentThumbHeight']) && strlen($attachment['filename']) < 249)
			{
				// A proper thumb doesn't exist yet? Create one!
				if (empty($attachment['id_thumb']) || $attachment['thumb_width'] > $modSettings['pmAttachmentThumbWidth'] || $attachment['thumb_height'] > $modSettings['pmAttachmentThumbHeight'] || ($attachment['thumb_width'] < $modSettings['pmAttachmentThumbWidth'] && $attachment['thumb_height'] < $modSettings['pmAttachmentThumbHeight']))
				{
					$filename = getPMAttachmentFilename($attachment['filename'], $attachment['id_attach'], $attachment['id_folder']);

					require_once($sourcedir . '/Subs-Graphics.php');
					if (createThumbnail($filename, $modSettings['pmAttachmentThumbWidth'], $modSettings['pmAttachmentThumbHeight']))
					{
						// So what folder are we putting this image in?
						if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
						{
							if (!is_array($modSettings['pmAttachmentUploadDir']))
								$modSettings['pmAttachmentUploadDir'] = @unserialize($modSettings['pmAttachmentUploadDir']);
							$path = $modSettings['pmAttachmentUploadDir'][$modSettings['pmCurrentAttachmentUploadDir']];
							$id_folder_thumb = $modSettings['pmCurrentAttachmentUploadDir'];
						}
						else
						{
							$path = $modSettings['pmAttachmentUploadDir'];
							$id_folder_thumb = 1;
						}

						// Calculate the size of the created thumbnail.
						list ($attachment['thumb_width'], $attachment['thumb_height']) = @getimagesize($filename . '_thumb');
						$thumb_size = filesize($filename . '_thumb');

						$thumb_filename = $attachment['filename'] . '_thumb';
						$thumb_hash = getPMAttachmentFilename($thumb_filename, false, null, true);

						// Add this beauty to the database.
						$smcFunc['db_insert']('',
							'{db_prefix}pm_attachments',
	// Does this have a mime type?
							array('id_folder' => 'int', 'id_pm' => 'int', 'attachment_type' => 'int', 'filename' => 'string', 'file_hash' => 'string', 'size' => 'int', 'width' => 'int', 'height' => 'int'),
							array($id_folder_thumb, $id_pm, 3, $thumb_filename, $thumb_hash, (int) $thumb_size, (int) $attachment['thumb_width'], (int) $attachment['thumb_height']),
							array('id_attach')
						);
						$attachment['id_thumb'] = $smcFunc['db_insert_id']('{db_prefix}pm_attachments', 'id_attach');
						if (!empty($attachment['id_thumb']))
						{
							$smcFunc['db_query']('', '
								UPDATE {db_prefix}pm_attachments
								SET id_thumb = {int:id_thumb}
								WHERE id_attach = {int:id_attach}',
								array(
									'id_thumb' => $attachment['id_thumb'],
									'id_attach' => $attachment['id_attach'],
								)
							);

	// Does this have a mime type?
							$thumb_realname = getPMAttachmentFilename($thumb_filename, $attachment['id_thumb'], $id_folder_thumb, false, $thumb_hash);
							rename($filename . '_thumb', $thumb_realname);
						}
					}
				}

				// Only adjust dimensions on successful thumbnail creation.
				if (!empty($attachment['thumb_width']) && !empty($attachment['thumb_height']))
				{
					$attachmentData[$i]['width'] = $attachment['thumb_width'];
					$attachmentData[$i]['height'] = $attachment['thumb_height'];
				}
			}

			if (!empty($attachment['id_thumb']))
				$attachmentData[$i]['thumbnail'] = array(
					'id' => $attachment['id_thumb'],
					'href' => $scripturl . '?action=dlpmattach;pm=' . $id_pm . ';attach=' . $attachment['id_thumb'] . ';image',
				);
			$attachmentData[$i]['thumbnail']['has_thumb'] = !empty($attachment['id_thumb']);

			// If thumbnails are disabled, check the maximum size of the image.
			if (!$attachmentData[$i]['thumbnail']['has_thumb'] && ((!empty($modSettings['max_image_width']) && $attachment['width'] > $modSettings['max_image_width']) || (!empty($modSettings['max_image_height']) && $attachment['height'] > $modSettings['max_image_height'])))
			{
				if (!empty($modSettings['max_image_width']) && (empty($modSettings['max_image_height']) || $attachment['height'] * $modSettings['max_image_width'] / $attachment['width'] <= $modSettings['max_image_height']))
				{
					$attachmentData[$i]['width'] = $modSettings['max_image_width'];
					$attachmentData[$i]['height'] = floor($attachment['height'] * $modSettings['max_image_width'] / $attachment['width']);
				}
				elseif (!empty($modSettings['max_image_width']))
				{
					$attachmentData[$i]['width'] = floor($attachment['width'] * $modSettings['max_image_height'] / $attachment['height']);
					$attachmentData[$i]['height'] = $modSettings['max_image_height'];
				}
			}
			elseif ($attachmentData[$i]['thumbnail']['has_thumb'])
			{
				// If the image is too large to show inline, make it a popup.
				if (((!empty($modSettings['max_image_width']) && $attachmentData[$i]['real_width'] > $modSettings['max_image_width']) || (!empty($modSettings['max_image_height']) && $attachmentData[$i]['real_height'] > $modSettings['max_image_height'])))
					$attachmentData[$i]['thumbnail']['javascript'] = 'return reqWin(\'' . $attachmentData[$i]['href'] . ';image\', ' . ($attachment['width'] + 20) . ', ' . ($attachment['height'] + 20) . ', true);';
				else
					$attachmentData[$i]['thumbnail']['javascript'] = 'return expandThumb(' . $attachment['id_attach'] . ');';
			}

			if (!$attachmentData[$i]['thumbnail']['has_thumb'])
				$attachmentData[$i]['downloads']++;
		}
	}

	return $attachmentData;
}

]]></add>
	</operation>
</file>
<file name="$sourcedir/ManageAttachments.php">
	<operation>
		<search position="before"><![CDATA[	// If they want to delete attachment(s), delete them. (otherwise fall through..)
	$subActions = array(
		'attachments' => 'ManageAttachmentSettings',]]></search>
		<add><![CDATA[
		'pmattachments' => 'ManagePMAttachmentSettings',
		'pmattachpaths' => 'ManagePMAttachmentPaths',
		'pmByAge' => 'RemovePMAttachmentByAge',
		'pmBySize' => 'RemovePMAttachmentBySize',
		'pmByDowns' => 'RemovePMAttachByDownloads',
		'pmRemoveReported' => 'RemoveReportedPMAttachments',
		'pmRemoveByMembers' => 'RemovePMAttachByMembers',
		'pmremoveall' => 'RemoveAllPMAttachments',
		'pmrepair' => 'RepairPMAttachments',]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[	$context['attach_multiple_dirs'] = !empty($modSettings['currentAttachmentUploadDir']);]]></search>
		<add><![CDATA[

	//
	// PM ATTACHMENTS MOD BEGIN...
	//
	if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
		$pmattach_dirs = unserialize($modSettings['pmAttachmentUploadDir']);
	else
		$pmattach_dirs = array($modSettings['pmAttachmentUploadDir']);
	
	// Get the number of pm attachments....
	$request = $smcFunc['db_query']('', '
		SELECT COUNT(*)
		FROM {db_prefix}pm_attachments
		WHERE attachment_type = {int:attachment_type}',
		array(
			'attachment_type' => 0,
		)
	);
	list ($context['num_pmattachments']) = $smcFunc['db_fetch_row']($request);
	$smcFunc['db_free_result']($request);
	
	// Find out how big the directory is. We have to loop through all our pm attachment paths in case there's an old temp file in one of them.
	$pmAttachmentDirSize = 0;
	foreach ($pmattach_dirs as $id => $pmattach_dir)
	{
		$dir = @opendir($pmattach_dir) or fatal_lang_error('cant_access_upload_path', 'critical');
		while ($file = readdir($dir))
		{
			if ($file == '.' || $file == '..')
				continue;

			if (preg_match('~^post_tmp_\d+_\d+$~', $file) != 0)
			{
				// Temp file is more than 5 hours old!
				if (filemtime($pmattach_dir . '/' . $file) < time() - 18000)
					@unlink($pmattach_dir . '/' . $file);
				continue;
			}

			// We're only counting the size of the current pm attachment directory.
			if (empty($modSettings['pmCurrentAttachmentUploadDir']) || $modSettings['pmCurrentAttachmentUploadDir'] == $id)
				$pmAttachmentDirSize += filesize($pmattach_dir . '/' . $file);
		}
		closedir($dir);
	}
	// Divide it into kilobytes.
	$pmAttachmentDirSize /= 1024;

	// If they specified a limit only....
	if (!empty($modSettings['pmAttachmentDirSizeLimit']))
		$context['pmattachment_space'] = max(round($modSettings['pmAttachmentDirSizeLimit'] - $pmAttachmentDirSize, 2), 0);
	$context['pmattachment_total_size'] = round($pmAttachmentDirSize, 2);

	$context['pmattach_multiple_dirs'] = !empty($modSettings['pmCurrentAttachmentUploadDir']);
	
	// calling all reporters...
	$request = $smcFunc['db_query']('', '
		SELECT DISTINCT
			pm.from_name
		FROM {db_prefix}personal_messages AS pm
			INNER JOIN {db_prefix}pm_attachments AS pa ON (pa.attachment_type = {int:not_thumb})
		WHERE
			pm.id_pm = pa.pm_report
		ORDER BY pm.from_name ASC',
		array(
			'not_thumb' => 0,
		)
	); 
	
	$context['pmattach_reported_from'] = array();
	
	while ($row = $smcFunc['db_fetch_assoc']($request))
		$context['pmattach_reported_from'][] = (string) $row['from_name'];
	
	$smcFunc['db_free_result']($request);

	//
	// PM ATTACHMENTS MOD END!!
	//

]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[function pauseAttachmentMaintenance($to_fix, $max_substep = 0)]]></search>
		<add><![CDATA[function pauseAttachmentMaintenance($to_fix, $max_substep = 0, $pm = false)]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[	$context['continue_get_data'] = '?action=admin;area=manageattachments;sa=repair' . (isset($_GET['fixErrors']) ? ';fixErrors' : '') . ';step=' . $_GET['step'] . ';substep=' . $_GET['substep'] . ';' . $context['session_var'] . '=' . $context['session_id'];]]></search>
		<add><![CDATA[	if ($pm)
		$repair = 'pmrepair';
	else
		$repair = 'repair';

	$context['continue_get_data'] = '?action=admin;area=manageattachments;sa=' . $repair . (isset($_GET['fixErrors']) ? ';fixErrors' : '') . ';step=' . $_GET['step'] . ';substep=' . $_GET['substep'] . ';' . $context['session_var'] . '=' . $context['session_id'];]]></add>
	</operation>
	<operation>
		<search position="end" /><add><![CDATA[

//
// PM ATTACHMENTS MOD BEGIN...
//

function ManagePMAttachmentSettings($return_config = false)
{
	global $txt, $modSettings, $scripturl, $context, $options, $sourcedir;

	$context['valid_pm_upload_dir'] = is_dir($modSettings['pmAttachmentUploadDir']) && is_writable($modSettings['pmAttachmentUploadDir']);

	$config_vars = array(
		array('title', 'pmattachment_manager_settings'),
			// Are attachments enabled?
			array('select', 'pmAttachmentEnable', array(&$txt['pmAttachmentEnable_deactivate'], &$txt['pmAttachmentEnable_enable_all'], &$txt['pmAttachmentEnable_disable_new'])),
		'',
			// Extension checks etc.
			array('check', 'pmAttachmentCheckExtensions'),
			array('text', 'pmAttachmentExtensions', 40),
			array('check', 'pmAttachmentEncryptFilenames'),
		'',
			// Directory and size limits.
			empty($modSettings['pmCurrentAttachmentUploadDir']) ? array('text', 'pmAttachmentUploadDir', 40, 'invalid' => !$context['valid_pm_upload_dir']) : array('var_message', 'pmAttachmentUploadDir_multiple', 'message' => 'pmAttachmentUploadDir_multiple_configure'),
			array('text', 'pmAttachmentDirSizeLimit', 6, 'postinput' => $txt['kilobyte']),
			array('text', 'attachmentPMLimit', 6, 'postinput' => $txt['kilobyte']),
			array('text', 'pmAttachmentSizeLimit', 6, 'postinput' => $txt['kilobyte']),
			array('text', 'attachmentNumPerPMLimit', 6),
		'',
			// Thumbnail settings.
			array('check', 'pmAttachmentShowImages'),
			array('check', 'pmAttachmentThumbnails'),
			array('text', 'pmAttachmentThumbWidth', 6),
			array('text', 'pmAttachmentThumbHeight', 6),
	);

	if ($return_config)
		return $config_vars;

	// These are very likely to come in handy! (i.e. without them we're doomed!)
	require_once($sourcedir .'/ManagePermissions.php');
	require_once($sourcedir .'/ManageServer.php');

	// Saving settings?
	if (isset($_GET['save']))
	{
		saveDBSettings($config_vars);
		redirectexit('action=admin;area=manageattachments;sa=pmattachments');
	}

	$context['post_url'] = $scripturl . '?action=admin;area=manageattachments;save;sa=pmattachments';
	prepareDBSettingContext($config_vars);

	$context['sub_template'] = 'show_settings';
}

// Prepare the actual PM attachment directories to be displayed in the list.
function list_getPMAttachDirs()
{
	global $smcFunc, $modSettings, $sc, $txt;

	// The pm dirs should already have been unserialized but just in case...
	if (!is_array($modSettings['pmAttachmentUploadDir']))
		$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

	$request = $smcFunc['db_query']('', '
		SELECT id_folder, COUNT(id_attach) AS num_attach
		FROM {db_prefix}pm_attachments
		GROUP BY id_folder',
		array(
		)
	);

	$expected_files = array();
	while ($row = $smcFunc['db_fetch_assoc']($request))
		$expected_files[$row['id_folder']] = $row['num_attach'];
	$smcFunc['db_free_result']($request);

	$attachdirs = array();
	foreach ($modSettings['pmAttachmentUploadDir'] as $id => $dir)
	{
		// If there aren't any attachments in this directory this won't exist.
		if (!isset($expected_files[$id]))
			$expected_files[$id] = 0;

		// Check if the directory is doing okay.
		list ($status, $error, $size) = attachDirStatus($dir, $expected_files[$id]);

		$attachdirs[] = array(
			'id' => $id,
			'current' => $id == $modSettings['pmCurrentAttachmentUploadDir'],
			'path' => $dir,
			'current_size' => $size,
			'num_files' => $expected_files[$id],
			'status' => ($error ? '<span class="error">' : '') . sprintf($txt['pmattach_dir_' . $status], $sc) . ($error ? '</span>' : ''),
		);
	}

	// Just stick a new directory on at the bottom.
	if (isset($_REQUEST['new_path']))
		$attachdirs[] = array(
			'id' => max(array_merge(array_keys($expected_files), array_keys($modSettings['pmAttachmentUploadDir']))) + 1,
			'current' => false,
			'path' => '',
			'current_size' => '',
			'num_files' => '',
			'status' => '',
		);

	return $attachdirs;
}

//
// END PM Attachments!
//

]]></add>
	</operation>
<operation>
		<search position="end" />
		<add><![CDATA[

//
// PM ATTACHMENTS MOD BEGIN...
//

function ManagePMAttachmentPaths()
{
	global $modSettings, $scripturl, $context, $txt, $sourcedir, $smcFunc;

	// Saving?
	if (isset($_REQUEST['save']))
	{
		$new_dirs = array();
		foreach ($_POST['dirs'] as $id => $path)
		{
			$id = (int) $id;
			if ($id < 1)
				continue;

			if (empty($path))
			{
				// Let's not try to delete a path with files in it.
				$request = $smcFunc['db_query']('', '
					SELECT COUNT(id_attach) AS num_attach
					FROM {db_prefix}pm_attachments
					WHERE id_folder = {int:id_folder}',
					array(
						'id_folder' => (int) $id,
					)
				);

				list ($num_attach) = $smcFunc['db_fetch_row']($request);
				$smcFunc['db_free_result']($request);

				// It's safe to delete.
				if ($num_attach == 0)
					continue;
			}


			$new_dirs[$id] = $path;
		}

		// We need to make sure the current directory is right.
		$_POST['current_dir'] = (int) $_POST['current_dir'];
		if (empty($_POST['current_dir']) || empty($new_dirs[$_POST['current_dir']]))
			fatal_lang_error('pmattach_path_current_bad', false);

		// Going back to just one path?
		if (count($new_dirs) == 1)
		{
			// We might need to reset the paths. This loop will just loop through once.
			foreach ($new_dirs as $id => $dir)
			{
				if ($id != 1)
					$smcFunc['db_query']('', '
						UPDATE {db_prefix}pm_attachments
						SET id_folder = {int:default_folder}
						WHERE id_folder = {int:current_folder}',
						array(
							'default_folder' => 1,
							'current_folder' => $id,
						)
					);

				updateSettings(array(
					'pmCurrentAttachmentUploadDir' => 0,
					'pmAttachmentUploadDir' => $dir,
				));
			}
		}
		else
			// Save it to the database.
			updateSettings(array(
				'pmCurrentAttachmentUploadDir' => $_POST['current_dir'],
				'pmAttachmentUploadDir' => serialize($new_dirs),
			));
	}

	// Are they here for the first time?
	if (empty($modSettings['pmCurrentAttachmentUploadDir']))
	{
		$modSettings['pmAttachmentUploadDir'] = array(
			1 => $modSettings['pmAttachmentUploadDir']
		);
		$modSettings['pmCurrentAttachmentUploadDir'] = 1;
	}
	// Otherwise just load up their attachment paths.
	else
		$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

	$listOptions = array(
		'id' => 'pmattach_paths',
		'base_href' => $scripturl . '?action=admin;area=manageattachments;sa=pmattachpaths;' . $context['session_var'] . '=' . $context['session_id'],
		'title' => $txt['pmattach_paths'],
		'get_items' => array(
			'function' => 'list_getPMAttachDirs',			
		),
		'columns' => array(
			'current_dir' => array(
				'header' => array(
					'value' => $txt['pmattach_current_dir'],
				),
				'data' => array(
					'function' => create_function('$rowData', '
						return \'<input type="radio" name="current_dir" value="\' . $rowData[\'id\'] . \'" \' . ($rowData[\'current\'] ? \'checked="checked"\' : \'\') . \' class="check" />\';
					'),
					'style' => 'text-align: center; width: 15%;',
				),
			),
			'path' => array(
				'header' => array(
					'value' => $txt['pmattach_path'],
				),
				'data' => array(
					'function' => create_function('$rowData', '
						return \'<input type="text" size="50" name="dirs[\' . $rowData[\'id\'] . \']" value="\' . $rowData[\'path\'] . \'" />\';
					'),
					'style' => 'text-align: center; width: 30%;',
				),
			),
			'current_size' => array(
				'header' => array(
					'value' => $txt['pmattach_current_size'],
				),
				'data' => array(
					'db' => 'current_size',
					'style' => 'text-align: center; width: 15%;',
				),
			),
			'num_files' => array(
				'header' => array(
					'value' => $txt['pmattach_num_files'],
				),
				'data' => array(
					'db' => 'num_files',
					'style' => 'text-align: center; width: 15%;',
				),
			),
			'status' => array(
				'header' => array(
					'value' => $txt['pmattach_dir_status'],
				),
				'data' => array(
					'db' => 'status',
					'style' => 'text-align: center; width: 25%;',
				),
			),
		),
		'form' => array(
			'href' => $scripturl . '?action=admin;area=manageattachments;sa=pmattachpaths;' . $context['session_var'] . '=' . $context['session_id'],
		),
		'additional_rows' => array(
			array(
				'position' => 'below_table_data',
				'value' => '<input type="submit" name="new_path" value="' . $txt['pmattach_add_path'] . '" />&nbsp;<input type="submit" name="save" value="' . $txt['save'] . '" />',
				'class' => 'titlebg',
				'style' => 'text-align: right;',
			),
		),
	);

	require_once($sourcedir . '/Subs-List.php');
	createList($listOptions);

	// Fix up our template.
	$context[$context['admin_menu_name']]['current_subsection'] = 'pmattachments';
	$context['page_title'] = $txt['pmattach_path_manage'];
	$context['sub_template'] = 'pmattachment_paths';
}

//
// PM ATTACHMENTS MOD END!
//

]]></add>
	</operation>
<operation>
		<search position="end" />
		<add><![CDATA[


//
// PM ATTACHMENTS MOD BEGIN...
//

// Removes pm attachments - allowed query_types: '', 'personalmessages'
function removePMAttachments($condition, $query_type = '', $return_affected_pms = false, $autoThumbRemoval = true, $is_update = true)
{
	global $modSettings, $smcFunc;

	//!!! This might need more work!
	$new_condition = array();
	$query_parameter = array(
		'thumb_attachment_type' => 3,
	);

	if (is_array($condition))
	{
		foreach ($condition as $real_type => $restriction)
		{
			// Doing a NOT?
			$is_not = substr($real_type, 0, 4) == 'not_';
			$type = $is_not ? substr($real_type, 4) : $real_type;

			if (in_array($type, array('id_attach', 'id_pm')))
				$new_condition[] = 'pa.' . $type . ($is_not ? ' NOT' : '') . ' IN (' . (is_array($restriction) ? '{array_int:' . $real_type . '}' : '{int:' . $real_type . '}') . ')';
			elseif ($type == 'attachment_type')
				$new_condition[] = 'pa.attachment_type = {int:' . $real_type . '}';
			elseif ($type == 'msgtime')
				$new_condition[] = 'pm.msgtime < {int:' . $real_type . '}';
			elseif ($type == 'pm_report')
				$new_condition[] = 'pa.pm_report > {int:' . $real_type . '}';
			elseif ($type == 'size')
				$new_condition[] = 'pa.size > {int:' . $real_type . '}';

			// Add the parameter!
			$query_parameter[$real_type] = $restriction;
		}
		$condition = implode(' AND ', $new_condition);
	}

	// Delete it only if it exists...
	$pms = array();
	$attach = array();
	$parents = array();

	// Get all the attachment names and id_pm's.
	$request = $smcFunc['db_query']('', '
		SELECT
			pa.id_pm, pa.id_folder, pa.downloads, pa.filename, pa.file_hash, pa.attachment_type, pa.id_attach' . ($query_type == 'personalmessages' ? ', pm.id_pm' : '') . ',
			thumb.id_folder AS thumb_folder, IFNULL(thumb.id_attach, 0) AS id_thumb, thumb.filename AS thumb_filename, thumb.file_hash as thumb_file_hash, thumb_parent.id_attach AS id_parent
		FROM {db_prefix}pm_attachments AS pa' .($query_type == 'personalmessages' ? '
			INNER JOIN {db_prefix}personal_messages AS pm ON (pm.id_pm = pa.id_pm)' : '') . '
			LEFT JOIN {db_prefix}pm_attachments AS thumb ON (thumb.id_attach = pa.id_thumb)
			LEFT JOIN {db_prefix}pm_attachments AS thumb_parent ON (thumb.attachment_type = {int:thumb_attachment_type} AND thumb_parent.id_thumb = pa.id_attach)
		WHERE ' . $condition,
		$query_parameter
	);

	while ($row = $smcFunc['db_fetch_assoc']($request))
	{
		// Figure out the "encrypted" filename and delete it ;).
			$filename = getPMAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
			@unlink($filename);

			// If this was a thumb, the parent attachment should know about it.
			if (!empty($row['id_parent']))
				$parents[] = $row['id_parent'];

			// If this attachments has a thumb, remove it as well.
			if (!empty($row['id_thumb']) && $autoThumbRemoval)
			{
				$thumb_filename = getPMAttachmentFilename($row['thumb_filename'], $row['id_thumb'], $row['thumb_folder'], false, $row['thumb_file_hash']);
				@unlink($thumb_filename);
				$attach[] = $row['id_thumb'];
			}

		// Make a list.
		if ($return_affected_pms && empty($row['attachment_type']))
			$pms[] = $row['id_pm'];

		$attach[] = $row['id_attach'];
	}
	$smcFunc['db_free_result']($request);

	// Removed attachments don't have to be updated anymore.
	$parents = array_diff($parents, $attach);
	if (!empty($parents))

		$smcFunc['db_query']('', '
			UPDATE {db_prefix}pm_attachments
			SET id_thumb = {int:no_thumb}
			WHERE id_attach IN ({array_int:parent_attachments})',
			array(
				'parent_attachments' => $parents,
				'no_thumb' => 0,
			)
		);

	if (!empty($attach)) {
	
		// Remove the attachment from pm_attachments...
		$smcFunc['db_query']('', '
			DELETE FROM {db_prefix}pm_attachments
			WHERE id_attach IN ({array_int:attachment_list})',
			array(
				'attachment_list' => $attach,
			)
		);

	if ($is_update) {		
			$request = $smcFunc['db_query']('', '
				SELECT
				downloads, attachments, id_pm, id_member
				FROM {db_prefix}pm_recipients',
				array(
				)
			);
			
			while ($row = $smcFunc['db_fetch_assoc']($request))
			{			
				if (strlen($row['attachments']) >= 1 && strlen($row['downloads']) >= 1 && in_array($row['id_pm'], array_unique($pms)))
				{
					$pmr_attach = explode(',', $row['attachments']);
					$pmr_downs = explode(',', $row['downloads']);
					
					// get outta here...
					$pmr_attach = array_diff($pmr_attach, $attach);
					$pmr_downs = array_intersect_key($pmr_downs, $pmr_attach);
	
					$smcFunc['db_query']('', '
						UPDATE {db_prefix}pm_recipients
						SET attachments = {string:new_attach},
							downloads = {string:new_downs} 
							WHERE id_pm = {int:id_pm} AND
							id_member = {int:id_member}',
						array(
							'new_downs' => implode(',', $pmr_downs),
							'new_attach' =>  implode(',', array_unique($pmr_attach)),
							'id_pm' => $row['id_pm'],
							'id_member' => $row['id_member'],
						)
					);
				}
			}	
			$smcFunc['db_free_result']($request);
		}
	}

	if ($return_affected_pms)
		return array_unique($pms);
}

function RemovePMAttachByDownloads()
{
	global $modSettings, $smcFunc;

	checkSession('post', 'admin');

	$store_ids = array();
	$remove_ids = array();

	// this could take awhile...
	$request = $smcFunc['db_query']('', '
		SELECT
		downloads, attachments
		FROM {db_prefix}pm_recipients',
		array(
		)
	);
	
	while ($row = $smcFunc['db_fetch_assoc']($request))
	{
		// calling all recipients!  How many times have you each downloaded the file?
		$downloads = explode(',', $row['downloads']);
		$attachments =  explode(',', $row['attachments']);
		
		foreach ($attachments as $attachid => $value) {
			$attachint = intval($value);
			
			// does it apply?
			if (intval($downloads[$attachid]) >= $_POST['downloads'])
				$store_ids[] = $attachint;
			else
				$remove_ids[] = $attachint;	
		}		
	}
	
	$smcFunc['db_free_result']($request);
	
	$store_ids = array_unique($store_ids);
	$remove_ids = array_unique($remove_ids);
	$attaches = array_diff($store_ids, $remove_ids);
	
	if (!empty($attaches))
	{
		// Find humungous pm attachments.
		$personalmessages = removePMAttachments(array('id_attach' => $attaches), '', true);
	
		// And make a note on the pm.
		if (!empty($personalmessages))
			$smcFunc['db_query']('', '
				UPDATE {db_prefix}personal_messages
				SET body = CONCAT(body, ' . (!empty($_POST['notice']) ? '{string:notice}' : '') . ')
				WHERE id_pm IN ({array_int:personalmessages})',
				array(
					'personalmessages' => $personalmessages,
					'notice' => empty($_POST['notice']) ? '' : '<br /><br />' . $_POST['notice'],
				)
			);
	}
		redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

//
// PM ATTACHMENTS MOD END!
//

]]></add>
	</operation>
<operation>
		<search position="end" />
		<add><![CDATA[


//
// PM ATTACHMENTS MOD BEGIN...
//

function RemoveReportedPMAttachments()
{
	global $smcFunc;
	
	checkSession('post', 'admin');

	$_POST['reportedMembers'] = isset($_POST['reportedMembers']) ? (string) $_POST['reportedMembers'] : '';

	// how can this happen with a select??  You never know!!
	if (strlen($_POST['reportedMembers']) <= 0)
		fatal_error($txt['pmattach_no_selection'], false);

	// Are we getting reports from a member?  Well then, let's get all attach ids...
	if ($_POST['reportedMembers'] != 'all')
	{
		$request = $smcFunc['db_query']('', '
			SELECT DISTINCT
				pa.id_attach
			FROM {db_prefix}personal_messages AS pm
				LEFT JOIN {db_prefix}pm_attachments AS pa ON (pa.attachment_type = {int:not_thumb})
			WHERE
				pm.id_pm = pa.pm_report AND pm.from_name = {string:member_from}',
			array(
				'not_thumb' => 0,
				'member_from' => $_POST['reportedMembers'],
			)
		);

		$attaches = array();

		while ($row = $smcFunc['db_fetch_assoc']($request))
			$attaches[] = (int) $row['id_attach'];
		
		$smcFunc['db_free_result']($request);
		
		if (!empty($attaches))
			$personalmessages = removePMAttachments(array('id_attach' => $attaches), '', true);
	} else
		$personalmessages = removePMAttachments(array('attachment_type' => 0, 'pm_report' => 0), '', true);

	// And make a note on the pm.
	if (!empty($personalmessages))
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}personal_messages
			SET body = CONCAT(body, ' . (!empty($_POST['notice']) ? '{string:notice}' : '') . ')
			WHERE id_pm IN ({array_int:personalmessages})',
			array(
				'personalmessages' => $personalmessages,
				'notice' => empty($_POST['notice']) ? '' : '<br /><br />' . $_POST['notice'],
			)
		);

	redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

function RemovePMAttachByMembers()
{
	global $smcFunc;
	
	checkSession('post', 'admin');

	$_POST['fromtoMembers'] = isset($_POST['fromtoMembers']) ? (int) $_POST['fromtoMembers'] : fatal_error($txt['pmattach_no_selection'], false);

	$strMembers = trim(strtolower($_POST['members']));
	
	if (substr($strMembers, 0, 1) == ',')
		$strMembers = substr($strMembers, 1);
	
	if (substr($strMembers, -1) == ',')
		$strMembers = substr($strMembers, 0, strlen($strMembers - 1));

	// now let's get the members.
	$members_inputted = array();
	$members = array();
	
	$members_inputted = explode(',', $strMembers);
	$members_inputted = array_unique($members_inputted);
		
	// let's trim it down if needed...
	foreach ($members_inputted as $key => $username)
	{
		$user = (string) trim($username);
		if (strlen($user) >= 1)
			$members[] = $user;
	}
	
	// what, no members?? How dare you!
	if (count($members) >= 1)
	{	
		// is it coming from or going to?
		if (!empty($_POST['fromtoMembers']))
		{		
			// TO MEMBERS, just getting a distinct feeling here...
			$request = $smcFunc['db_query']('', '
				SELECT DISTINCT
					pa.id_attach
				FROM {db_prefix}members AS mem
					INNER JOIN {db_prefix}pm_recipients AS pmr ON (pmr.id_member = mem.id_member)
					LEFT JOIN {db_prefix}pm_attachments AS pa ON (pa.id_pm = pmr.id_pm AND pa.attachment_type = {int:not_thumb})					
				WHERE
					LOWER(mem.real_name) IN ({array_string:member_names})',
				array(
					'not_thumb' => 0,
					'member_names' => $members,
				)
			);
		} 
		else 
		{	
			// FROM MEMBERS, just getting a distinct feeling here...
			$request = $smcFunc['db_query']('', '
				SELECT DISTINCT
					pa.id_attach
				FROM {db_prefix}personal_messages AS pm
					LEFT JOIN {db_prefix}pm_attachments AS pa ON (pa.id_pm = pm.id_pm AND pa.attachment_type = {int:not_thumb})
				WHERE
					LOWER(pm.from_name) IN ({array_string:member_names})',
				array(
					'not_thumb' => 0,
					'member_names' => $members,
				)
			);			
		}
	
		$attaches = array();
	
		while ($row = $smcFunc['db_fetch_assoc']($request))
			$attaches[] = (int) $row['id_attach'];
		
		$smcFunc['db_free_result']($request);
	
		if (!empty($attaches))
		{
			// Find humungous pm attachments.
			$personalmessages = removePMAttachments(array('id_attach' => $attaches), '', true);
		
			// And make a note on the pm.
			if (!empty($personalmessages))
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}personal_messages
					SET body = CONCAT(body, ' . (!empty($_POST['notice']) ? '{string:notice}' : '') . ')
					WHERE id_pm IN ({array_int:personalmessages})',
					array(
						'personalmessages' => $personalmessages,
						'notice' => empty($_POST['notice']) ? '' : '<br /><br />' . $_POST['notice'],
					)
				);
		}
	}
		redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

function RemovePMAttachmentByAge()
{
	global $modSettings, $smcFunc;

	checkSession('post', 'admin');

	// Deleting an attachment?
		// Get all the old attachments.
		$personalmessages = removePMAttachments(array('attachment_type' => 0,  'msgtime' => (time() - 24 * 60 * 60 * $_POST['age'])), 'personalmessages', true);

		// Update the messages to reflect the change.
		if (!empty($personalmessages))
			$smcFunc['db_query']('', '
				UPDATE {db_prefix}personal_messages
				SET body = CONCAT(body, ' . (!empty($_POST['notice']) ? '{string:notice}' : '') . ')
				WHERE id_pm IN ({array_int:personalmessages})',
				array(
					'personalmessages' => $personalmessages,
					'notice' => empty($_POST['notice']) ? '' : '<br /><br />' . $_POST['notice'],
				)
			);

	redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

function RemovePMAttachmentBySize()
{
	global $modSettings, $smcFunc;

	checkSession('post', 'admin');

	// Find humungous pm attachments.
	$personalmessages = removePMAttachments(array('attachment_type' => 0, 'size' => 1024 * $_POST['size']), '', true);

	// And make a note on the pm.
	if (!empty($personalmessages))
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}personal_messages
			SET body = CONCAT(body, ' . (!empty($_POST['notice']) ? '{string:notice}' : '') . ')
			WHERE id_pm IN ({array_int:personalmessages})',
			array(
				'personalmessages' => $personalmessages,
				'notice' => empty($_POST['notice']) ? '' : '<br /><br />' . $_POST['notice'],
			)
		);

	redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

function RemoveAllPMAttachments()
{
	global $txt, $smcFunc;

	checkSession('request', 'admin');

	$personalmessages = removePMAttachments(array('attachment_type' => 0), '', true);

	if (!isset($_POST['notice']))
		$_POST['notice'] = $txt['attachment_delete_admin'];

	// Add the notice on the end of the changed personal messages.
	if (!empty($personalmessages))
		$smcFunc['db_query']('', '
			UPDATE {db_prefix}personal_messages
			SET body = CONCAT(body, {string:deleted_personalmessage})
			WHERE id_pm IN ({array_int:personalmessages})',
			array(
				'personalmessages' => $personalmessages,
				'deleted_personalmessage' => '<br /><br />' . $_POST['notice'],
			)
		);

	redirectexit('action=admin;area=manageattachments;sa=maintenance');
}

//
// PM ATTACHMENTS MOD END!
//


]]></add>
	</operation>
<operation>
		<search position="end" />
		<add><![CDATA[


//
// PM ATTACHMENTS MOD BEGIN...
//

// This function should find pm attachments in the database that no longer exist and clear them, and fix pm filesize issues.
function RepairPMAttachments()
{
	global $modSettings, $context, $txt, $smcFunc;

	checkSession('get');

	// If we choose cancel, redirect right back.
	if (isset($_POST['cancel']))
		redirectexit('action=admin;area=manageattachments;sa=maintenance');

	// Try give us a while to sort this out...
	@set_time_limit(600);

	$_GET['step'] = empty($_GET['step']) ? 0 : (int) $_GET['step'];
	$_GET['substep'] = empty($_GET['substep']) ? 0 : (int) $_GET['substep'];

	// Don't recall the session just in case.
	if ($_GET['step'] == 0 && $_GET['substep'] == 0)
	{
		unset($_SESSION['attachments_to_fix']);
		unset($_SESSION['attachments_to_fix2']);

		// If we're actually fixing stuff - work out what.
		if (isset($_GET['fixErrors']))
		{
			// Nothing?
			if (empty($_POST['to_fix']))
				redirectexit('action=admin;area=manageattachments;sa=maintenance');

			$_SESSION['attachments_to_fix'] = array();
			//!!! No need to do this I think.
			foreach ($_POST['to_fix'] as $key => $value)
				$_SESSION['attachments_to_fix'][] = $value;
		}
	}

	// All the valid problems are here:
	$context['repair_errors'] = array(
		'missing_thumbnail_parent' => 0,
		'parent_missing_thumbnail' => 0,
		'file_missing_on_disk' => 0,
		'file_wrong_size' => 0,
		'file_size_of_zero' => 0,
		'attachment_no_pm' => 0,
		'wrong_folder' => 0,
	);

	$to_fix = !empty($_SESSION['attachments_to_fix']) ? $_SESSION['attachments_to_fix'] : array();
	$context['repair_errors'] = isset($_SESSION['attachments_to_fix2']) ? $_SESSION['attachments_to_fix2'] : $context['repair_errors'];
	$fix_errors = isset($_GET['fixErrors']) ? true : false;

	// Get stranded thumbnails.
	if ($_GET['step'] <= 0)
	{
		$result = $smcFunc['db_query']('', '
			SELECT MAX(id_attach)
			FROM {db_prefix}pm_attachments
			WHERE attachment_type = {int:thumbnail}',
			array(
				'thumbnail' => 3,
			)
		);
		list ($thumbnails) = $smcFunc['db_fetch_row']($result);
		$smcFunc['db_free_result']($result);

		for (; $_GET['substep'] < $thumbnails; $_GET['substep'] += 500)
		{
			$to_remove = array();

			$result = $smcFunc['db_query']('', '
				SELECT thumb.id_attach, thumb.id_folder, thumb.filename, thumb.file_hash
				FROM {db_prefix}pm_attachments AS thumb
					LEFT JOIN {db_prefix}pm_attachments AS tparent ON (tparent.id_thumb = thumb.id_attach)
				WHERE thumb.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND thumb.attachment_type = {int:thumbnail}
					AND tparent.id_attach IS NULL
				GROUP BY thumb.id_attach',
				array(
					'thumbnail' => 3,
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				$to_remove[] = $row['id_attach'];
				$context['repair_errors']['missing_thumbnail_parent']++;

				// If we are repairing remove the file from disk now.
				if ($fix_errors && in_array('missing_thumbnail_parent', $to_fix))
				{
					$filename = getPMAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
					@unlink($filename);
				}
			}
			if ($smcFunc['db_num_rows']($result) != 0)
				$to_fix[] = 'missing_thumbnail_parent';
			$smcFunc['db_free_result']($result);

			// Do we need to delete what we have?
			if ($fix_errors && !empty($to_remove) && in_array('missing_thumbnail_parent', $to_fix))
				$smcFunc['db_query']('', '
					DELETE FROM {db_prefix}pm_attachments
					WHERE id_attach IN ({array_int:to_remove})
						AND attachment_type = {int:attachment_type}',
					array(
						'to_remove' => $to_remove,
						'attachment_type' => 3,
					)
				);

			pauseAttachmentMaintenance($to_fix, $thumbnails, true);
		}

		$_GET['step'] = 1;
		$_GET['substep'] = 0;
		pauseAttachmentMaintenance($to_fix, 0, true);
	}

	// Find parents which think they have thumbnails, but actually, don't.
	if ($_GET['step'] <= 1)
	{
		$result = $smcFunc['db_query']('', '
			SELECT MAX(id_attach)
			FROM {db_prefix}pm_attachments
			WHERE id_thumb != {int:no_thumb}',
			array(
				'no_thumb' => 0,
			)
		);
		list ($thumbnails) = $smcFunc['db_fetch_row']($result);
		$smcFunc['db_free_result']($result);

		for (; $_GET['substep'] < $thumbnails; $_GET['substep'] += 500)
		{
			$to_update = array();

			$result = $smcFunc['db_query']('', '
				SELECT pa.id_attach
				FROM {db_prefix}pm_attachments AS pa
					LEFT JOIN {db_prefix}pm_attachments AS thumb ON (thumb.id_attach = pa.id_thumb)
				WHERE pa.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND pa.id_thumb != {int:no_thumb}
					AND thumb.id_attach IS NULL',
				array(
					'no_thumb' => 0,
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				$to_update[] = $row['id_attach'];
				$context['repair_errors']['parent_missing_thumbnail']++;
			}
			if ($smcFunc['db_num_rows']($result) != 0)
				$to_fix[] = 'parent_missing_thumbnail';
			$smcFunc['db_free_result']($result);

			// Do we need to delete what we have?
			if ($fix_errors && !empty($to_update) && in_array('parent_missing_thumbnail', $to_fix))
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET id_thumb = {int:no_thumb}
					WHERE id_attach IN ({array_int:to_update})',
					array(
						'to_update' => $to_update,
						'no_thumb' => 0,
					)
				);

			pauseAttachmentMaintenance($to_fix, $thumbnails, true);
		}

		$_GET['step'] = 2;
		$_GET['substep'] = 0;
		pauseAttachmentMaintenance($to_fix, 0, true);
	}

	// This may take forever I'm afraid, but life sucks... recount EVERY attachments!
	if ($_GET['step'] <= 2)
	{
		$result = $smcFunc['db_query']('', '
			SELECT MAX(id_attach)
			FROM {db_prefix}pm_attachments',
			array(
			)
		);
		list ($thumbnails) = $smcFunc['db_fetch_row']($result);
		$smcFunc['db_free_result']($result);

		for (; $_GET['substep'] < $thumbnails; $_GET['substep'] += 250)
		{
			$to_remove = array();
			$errors_found = array();

			$result = $smcFunc['db_query']('', '
				SELECT id_attach, id_folder, filename, file_hash, size, attachment_type
				FROM {db_prefix}pm_attachments
				WHERE id_attach BETWEEN {int:substep} AND {int:substep} + 249',
				array(
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				// Get the filename.
				if ($row['attachment_type'] == 1)
					$filename = $modSettings['custom_avatar_dir'] . '/' . $row['filename'];
				else
					$filename = getPMAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);

				// File doesn't exist?
				if (!file_exists($filename))
				{
					// If we're lucky it might just be in a different folder.
					if (!empty($modSettings['pmCurrentAttachmentUploadDir']))
					{
						// Get the attachment name with out the folder.
						$attachment_name = !empty($row['file_hash']) ? $row['id_attach'] . '_' . $row['file_hash'] : getLegacyPMAttachmentFilename($row['filename'], $row['id_attach'], null, true);

						if (!is_array($modSettings['attachmentUploadDir']))
							$modSettings['pmAttachmentUploadDir'] = unserialize($modSettings['pmAttachmentUploadDir']);

						// Loop through the other folders.
						foreach ($modSettings['pmAttachmentUploadDir'] as $id => $dir)
							if (file_exists($dir . '/' . $attachment_name))
							{
								$context['repair_errors']['wrong_folder']++;
								$errors_found[] = 'wrong_folder';

								// Are we going to fix this now?
								if ($fix_errors && in_array('wrong_folder', $to_fix))
									$smcFunc['db_query']('', '
										UPDATE {db_prefix}pm_attachments
										SET id_folder = {int:new_folder}
										WHERE id_attach = {int:id_attach}',
										array(
											'new_folder' => $id,
											'id_attach' => $row['id_attach'],
										)
									);

								continue 2;
							}
					}

					$to_remove[] = $row['id_attach'];
					$context['repair_errors']['file_missing_on_disk']++;
					$errors_found[] = 'file_missing_on_disk';
				}
				elseif (filesize($filename) == 0)
				{
					$context['repair_errors']['file_size_of_zero']++;
					$errors_found[] = 'file_size_of_zero';

					// Fixing?
					if ($fix_errors && in_array('file_size_of_zero', $to_fix))
					{
						$to_remove[] = $row['id_attach'];
						@unlink($filename);
					}
				}
				elseif (filesize($filename) != $row['size'])
				{
					$context['repair_errors']['file_wrong_size']++;
					$errors_found[] = 'file_wrong_size';

					// Fix it here?
					if ($fix_errors && in_array('file_wrong_size', $to_fix))
					{
						$smcFunc['db_query']('', '
							UPDATE {db_prefix}pm_attachments
							SET size = {int:filesize}
							WHERE id_attach = {int:id_attach}',
							array(
								'filesize' => filesize($filename),
								'id_attach' => $row['id_attach'],
							)
						);
					}
				}
			}

			if (in_array('file_missing_on_disk', $errors_found))
				$to_fix[] = 'file_missing_on_disk';
			if (in_array('file_size_of_zero', $errors_found))
				$to_fix[] = 'file_size_of_zero';
			if (in_array('file_wrong_size', $errors_found))
				$to_fix[] = 'file_wrong_size';
			if (in_array('wrong_folder', $errors_found))
				$to_fix[] = 'wrong_folder';
			$smcFunc['db_free_result']($result);

			// Do we need to delete what we have?
			if ($fix_errors && !empty($to_remove))
			{
				$smcFunc['db_query']('', '
					DELETE FROM {db_prefix}pm_attachments
					WHERE id_attach IN ({array_int:to_remove})',
					array(
						'to_remove' => $to_remove,
					)
				);
				$smcFunc['db_query']('', '
					UPDATE {db_prefix}pm_attachments
					SET id_thumb = {int:no_thumb}
					WHERE id_thumb IN ({array_int:to_remove})',
					array(
						'to_remove' => $to_remove,
						'no_thumb' => 0,
					)
				);
			}

			pauseAttachmentMaintenance($to_fix, $thumbnails, true);
		}

		$_GET['step'] = 3;
		$_GET['substep'] = 0;
		pauseAttachmentMaintenance($to_fix, 0, true);
	}

	// What about attachments, who are missing a pm :'(
	if ($_GET['step'] <= 4)
	{
		$result = $smcFunc['db_query']('', '
			SELECT MAX(id_attach)
			FROM {db_prefix}pm_attachments',
			array(
			)
		);
		list ($thumbnails) = $smcFunc['db_fetch_row']($result);
		$smcFunc['db_free_result']($result);

		for (; $_GET['substep'] < $thumbnails; $_GET['substep'] += 500)
		{
			$to_remove = array();

			$result = $smcFunc['db_query']('', '
				SELECT pa.id_attach, pa.id_folder, pa.filename, pa.file_hash
				FROM {db_prefix}pm_attachments AS pa
					LEFT JOIN {db_prefix}personal_messages AS pm ON (pm.id_pm = pa.id_pm)
				WHERE pa.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND pa.id_pm != {int:no_pm}
					AND pm.id_pm IS NULL',
				array(
					'no_pm' => 0,
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				$to_remove[] = $row['id_attach'];
				$context['repair_errors']['attachment_no_pm']++;

				// If we are repairing remove the file from disk now.
				if ($fix_errors && in_array('attachment_no_pm', $to_fix))
				{
					$filename = getPMAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
					@unlink($filename);
				}
			}
			if ($smcFunc['db_num_rows']($result) != 0)
				$to_fix[] = 'attachment_no_pm';
			$smcFunc['db_free_result']($result);

			// Do we need to delete what we have?
			if ($fix_errors && !empty($to_remove) && in_array('attachment_no_pm', $to_fix))
				$smcFunc['db_query']('', '
					DELETE FROM {db_prefix}pm_attachments
					WHERE id_attach IN ({array_int:to_remove})
						AND id_pm != {int:no_pm}',
					array(
						'to_remove' => $to_remove,
						'no_pm' => 0,
					)
				);

			pauseAttachmentMaintenance($to_fix, $thumbnails, true);
		}

		$_GET['step'] = 5;
		$_GET['substep'] = 0;
		pauseAttachmentMaintenance($to_fix, 0, true);
	}

	// Got here we must be doing well - just the template! :D
	$context['page_title'] = $txt['repair_attachments'];
	$context[$context['admin_menu_name']]['current_subsection'] = 'maintenance';
	$context['sub_template'] = 'pm_attachment_repair';

	// What stage are we at?
	$context['completed'] = $fix_errors ? true : false;
	$context['errors_found'] = !empty($to_fix) ? true : false;

}

//
// PM ATTACHMENTS MOD END!
//


]]></add>
	</operation>
</file>
<file name="$sourcedir/ManagePermissions.php">
	<operation>
		<search position="before"><![CDATA[	// Standard - ie. members.  They can do anything Restrictive can.
	$groupLevels['global']['standard'] = array_merge($groupLevels['global']['restrict'], array(]]></search>
		<add><![CDATA[
		'pm_view_attachments',
		'pm_post_attachments',]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[	$permissionList = array(
		'membergroup' => array(]]></search>
		<add><![CDATA[
			'pm_view_attachments' => array(false, 'pm', 'use_pm_system'),
			'pm_post_attachments' => array(false, 'pm', 'use_pm_system'),]]></add>
	</operation>
	<operation>
		<search position="before"><![CDATA[	$context['non_guest_permissions'] = array(]]></search>
		<add><![CDATA[
		'pm_view_attachments',
		'pm_post_attachments',]]></add>
	</operation>
</file>
<file name="$themedir/PersonalMessage.template.php">
	<operation>
		<search position="before"><![CDATA[		var allLabels = {};
		var currentLabels = {};]]></search>
		<add><![CDATA[

		function expandThumb(thumbID)
		{
			var img = document.getElementById(\'thumb_\' + thumbID);
			var link = document.getElementById(\'link_\' + thumbID);
			var tmp = img.src;
			img.src = link.href;
			link.href = tmp;
			img.style.width = \'\';
			img.style.height = \'\';
			return false;
		}

		// Open a new window.
		function reqWin(desktopURL, alternateWidth, alternateHeight, noScrollbars)
		{
			if ((alternateWidth && self.screen.availWidth * 0.8 < alternateWidth) || (alternateHeight && self.screen.availHeight * 0.8 < alternateHeight))
			{
				noScrollbars = false;
				alternateWidth = Math.min(alternateWidth, self.screen.availWidth * 0.8);
				alternateHeight = Math.min(alternateHeight, self.screen.availHeight * 0.8);
			}
			else
				noScrollbars = typeof(noScrollbars) != "undefined" && noScrollbars == true;
		
			window.open(desktopURL, \'requested_popup\', \'toolbar=no,location=no,status=no,menubar=no,scrollbars=\' + (noScrollbars ? \'no\' : \'yes\') + \',width=\' + (alternateWidth ? alternateWidth : 480) + \',height=\' + (alternateHeight ? alternateHeight : 220) + \',resizable=no\');
		
			// Return false so the click will not follow the link ;).
			return false;
		}
]]></add>
	</operation>
	<operation>
		<search position="after"><![CDATA[			// Show the member's signature?]]></search>
		<add><![CDATA[	// Assuming there are attachments...
	if (allowedTo('pm_view_attachments') && !empty($message['attachment'])) {


		echo '
					<div id="post_', $message['id'], '_footer" class="attachments">';
			
			echo '
						<hr width="100%" size="1" class="hrcolor" />
						<div style="overflow: ', $context['browser']['is_firefox'] ? 'visible' : 'auto', '; width: 100%;">';

			foreach ($message['attachment'] as $attachment)
			{
				if ($attachment['is_image'])
				{
					if ($attachment['thumbnail']['has_thumb'])
						echo '
								<a href="', $attachment['href'], ';image" id="link_', $attachment['id'], '" onclick="', $attachment['thumbnail']['javascript'], '"><img src="', $attachment['thumbnail']['href'], '" alt="" id="thumb_', $attachment['id'], '" border="0" /></a><br />';
					else
						echo '
								<img src="' . $attachment['href'] . ';image" alt="" width="' . $attachment['width'] . '" height="' . $attachment['height'] . '" border="0" /><br />';
				}
				echo '
								<a href="' . $attachment['href'] . '"><img src="' . $settings['images_url'] . '/icons/clip.gif" align="middle" alt="*" border="0" />&nbsp;' . $attachment['name'] . '</a> ';

				echo '
										(', $attachment['size'], ($attachment['is_image'] ? ', ' . $attachment['real_width'] . 'x' . $attachment['real_height'] . ' - ' . $txt['attach_viewed'] : ' - ' . $txt['attach_downloaded']) . ' ' . $attachment['downloads'] . ' ' . $txt['attach_times'] . '.)<br />';
			}
			echo '
						</div></div>';
						
	}

]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[	<form action="', $scripturl, '?action=pm;sa=send2" method="post" accept-charset="', $context['character_set'], '" name="postmodify" id="postmodify" class="flow_hidden" onsubmit="submitonce(this);smc_saveEntities(\'postmodify\', [\'subject\', \'message\']);">
		<div>]]></search>
		<add><![CDATA[	<form ', allowedTo('pm_post_attachments') ? 'enctype="multipart/form-data" ' : '', 'action="', $scripturl, '?action=pm;sa=send2" method="post" accept-charset="', $context['character_set'], '" name="postmodify" id="postmodify" class="flow_hidden" onsubmit="submitonce(this);smc_saveEntities(\'postmodify\', [\'subject\', \'message\']);">
		<div>]]></add>
	</operation>	
	<operation>
		<search position="after"><![CDATA[	// Send, Preview, spellcheck buttons.]]></search>
		<add><![CDATA[	// If this post already has attachments on it - give information about them.
	if (!empty($context['current_attachments']))
	{
		echo '
				<dl id="postAttachment">
					<dt>
						', $txt['attached'], ':
					</dt>
					<dd class="smalltext">
						<input type="hidden" name="attach_del[]" value="0" />
						', $txt['uncheck_unwatchd_attach'], ':
					</dd>';
			foreach ($context['current_attachments'] as $attachment)
				echo '
					<dd class="smalltext">
						<label for="attachment_', $attachment['id'], '"><input type="checkbox" id= "attachment_', $attachment['id'], '" name="attach_del[]" value="', $attachment['id'], '"', empty($attachment['unchecked']) ? ' checked="checked"' : '', ' class="input_check" /> ', $attachment['name'], '</label>
					</dd>';
		echo '
				</dl>';
	}

	// Is the user allowed to pm any additional ones? If so give them the boxes to do it!
	if (!empty($context['can_post_attachment']))
	{
		echo '								
							<dl id="postAttachment2">
								<dt>
									', $txt['attach'], ':
								</dt>	
								<dd class="smalltext">
									<input type="file" size="38" name="attachment[]" class="input_file" />';

		// Show more boxes only if they aren't approaching their limit.
		if ($context['num_allowed_attachments'] > 1)
			echo '
									<script language="JavaScript" type="text/javascript"><!-- // --><![', 'CDATA', '[
										var allowed_attachments = ', $context['num_allowed_attachments'], ' - 1;

										function addAttachment()
										{
											if (allowed_attachments <= 0)
												return alert("', $txt['more_attachments_error'], '");

											setOuterHTML(document.getElementById("moreAttachments"), \'<dd class="smalltext"><input type="file" size="38" name="attachment[]" class="input_file" /><\' + \'/dd><dd class="smalltext" id="moreAttachments"><a href="javascript:void(0);" onclick="addAttachment(); return false;">(', $txt['more_attachments'], ')<\' + \'/a><\' + \'/dd>\');

											allowed_attachments = allowed_attachments - 1;

											return true;
										}
									// ', ']', ']></script>
									</dd>
									<dd class="smalltext" id="moreAttachments"><a href="javascript:void(0);" onclick="addAttachment(); return false;">(', $txt['more_attachments'], ')</a></dd>';

			echo '
						<dd class="smalltext">';

		// Show some useful information such as allowed extensions, maximum size and amount of attachments allowed.
		if (!empty($modSettings['pmAttachmentCheckExtensions']))
			echo '
									', $txt['allowed_types'], ': ', $context['allowed_extensions'], '<br />';

		if (!empty($context['attachment_restrictions']))
			echo '
									', $txt['attach_restrictions'], ' ', implode(', ', $context['attachment_restrictions']), '<br />';

		echo '
						</dd>
					</dl>';
	}

]]></add>
	</operation>	
</file>
<file name="$themedir/ManageAttachments.template.php">
	<operation>
		<search position="before"><![CDATA[					<dt><strong>', $txt['attachment_space' . ($context['attach_multiple_dirs'] ? '_current' : '')], ':</strong></dt><dd>', isset($context['attachment_space']) ? $context['attachment_space'] . ' ' . $txt['kilobyte'] : $txt['attachmentdir_size_not_set'], '</dd>
				]]></search>
		<add><![CDATA[					<dt><hr /></dt><dd><hr /></dd>
					<dt><strong>', $txt['pmattachment_total'], ':</strong></dt><dd>', $context['num_pmattachments'], '</dd>
					<dt><strong>', $txt['pmattachmentdir_size' . ($context['pmattach_multiple_dirs'] ? '_current' : '')], ':</strong></dt><dd>', $context['pmattachment_total_size'], ' ', $txt['kilobyte'], ' <a href="', $scripturl, '?action=admin;area=manageattachments;sa=pmrepair;', $context['session_var'], '=', $context['session_id'], '">[', $txt['attachment_manager_repair'], ']</a></dd>
					<dt><strong>', $txt['pmattachment_space' . ($context['pmattach_multiple_dirs'] ? '_current' : '')], ':</strong></dt><dd>', isset($context['pmattachment_space']) ? $context['pmattachment_space'] . ' ' . $txt['kilobyte'] : $txt['attachmentdir_size_not_set'], '</dd>
				]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[					<input type="hidden" name="sa" value="byAge" />
				</form>
			</div>
			<span class="botslice"><span></span></span>
		</div>
	</div>
	<br class="clear" />';]]></search>
		<add><![CDATA[					<input type="hidden" name="sa" value="byAge" />
				</form>
			</div>
			<span class="botslice"><span></span></span>
		</div>
	<div class="cat_bar">
		<h3 class="catbg"><span class="left"></span>
				', $txt['pmattachment_options'], '
		</h3>
	</div>
	<div class="windowbg">
				<span class="topslice"><span></span></span>
				<div class="content">
					<form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					', $txt['pmattachment_remove_old'], ' <input type="text" name="age" value="25" size="4" class="input_text" /> ', $txt['days_word'], ' <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmByAge" />
					</form>
					<form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					', $txt['pmattachment_remove_size'], ' <input type="text" name="size" id="size" value="100" size="4" class="input_text" /> ', $txt['kilobyte'], ' <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmBySize" />
					</form>
					<form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					', $txt['pmattachment_remove_downloads'], ' <input type="text" name="downloads" id="downloads" value="1" size="4" class="input_text" /> ', $txt['pmattachment_downloads_times'], ' <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmByDowns" />
					</form>

					<hr /><form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					<a href="', $scripturl, '?action=helpadmin;help=pmattachments_remove_reported" onclick="return reqWin(this.href);" class="help"><img src="', $settings['images_url'], '/helptopics.gif" border="0" align="left" style="padding-right: 1ex;" /></a>', $txt['pmattachments_remove_reported'], ' <select name="reportedMembers"><option name="all" value="all" SELECTED>', $txt['pmattach_report_all_members'], '</option>';

					if (count($context['pmattach_reported_from']) >= 1)
					{
						echo '<optgroup label="', $txt['pmattach_specific_members'], '">';
						foreach ($context['pmattach_reported_from'] as $key => $reportedFrom)
							echo '<option name="report', $key, '" value="', $reportedFrom, '">', $reportedFrom, '</option>';

						echo '</optgroup>';
					}

					echo '</select> <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmRemoveReported" />
					</form>
					<form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments_members'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					<a href="', $scripturl, '?action=helpadmin;help=pmattachments_remove_by_members" onclick="return reqWin(this.href);" class="help"><img src="', $settings['images_url'], '/helptopics.gif" border="0" align="left" style="padding-right: 1ex;" /></a>', $txt['pmattachments_remove_by_members'], ' <select name="fromtoMembers"><option name="from" value="0" SELECTED>', $txt['pmattachments_remove_by_members_from'], '</option><option name="to" value="1">', $txt['pmattachments_remove_by_members_to'], '</option></select> ', $txt['pmattachments_remove_by_members_cont'], ' <input type="text" name="members" id="members" value="" size="25" class="input_text" /> <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmRemoveByMembers" />
					</form>

					<form action="', $scripturl, '?action=admin;area=manageattachments" method="post" accept-charset="', $context['character_set'], '" onsubmit="return confirm(\'', $txt['confirm_delete_pmattachments_all'], '\');" style="margin: 0 0 2ex 0;">
					', $txt['message'], ': <input type="text" name="notice" value="', $txt['attachment_delete_admin'], '" size="40" class="input_text" /><br />
					<a href="', $scripturl, '?action=helpadmin;help=pmattachments_remove_all" onclick="return reqWin(this.href);" class="help"><img src="', $settings['images_url'], '/helptopics.gif" border="0" align="left" style="padding-right: 1ex;" /></a>', $txt['pmattachments_remove_all'], ' <input type="submit" name="submit" value="', $txt['remove'], '" class="button_submit" />
					<input type="hidden" name="type" value="attachments" />
					<input type="hidden" name="', $context['session_var'], '" value="', $context['session_id'], '" />
					<input type="hidden" name="sa" value="pmremoveall" />
					</form>
			</div>
			<span class="botslice"><span></span></span>
		</div>
	</div>
	<br class="clear" />';]]></add>
	</operation>
	<operation>
		<search position="end" /><add><![CDATA[

function template_pm_attachment_repair()
{
	global $context, $txt, $scripturl;

	// If we've completed just let them know!
	if ($context['completed'])
	{
		echo '
	<table width="100%" cellpadding="4" cellspacing="0" align="center" border="0" class="tborder">
		<tr>
			<td class="titlebg">', $txt['repair_attachments_complete'], '</td>
		</tr><tr>
			<td class="windowbg2" width="100%">
				', $txt['repair_attachments_complete_desc'], '
			</td>
		</tr>
	</table>';
	}
	// What about if no errors were even found?
	elseif (!$context['errors_found'])
	{
		echo '
	<table width="100%" cellpadding="4" cellspacing="0" align="center" border="0" class="tborder">
		<tr>
			<td class="titlebg">', $txt['repair_attachments_complete'], '</td>
		</tr><tr>
			<td class="windowbg2" width="100%">
				', $txt['repair_attachments_no_errors'], '
			</td>
		</tr>
	</table>';
	}
	// Otherwise, I'm sad to say, we have a problem!
	else
	{
		echo '
	<form action="', $scripturl, '?action=admin;area=manageattachments;sa=pmrepair;fixErrors=1;step=0;substep=0;', $context['session_var'], '=', $context['session_id'], '" method="post" accept-charset="', $context['character_set'], '">
	<table width="100%" cellpadding="4" cellspacing="0" align="center" border="0" class="tborder">
		<tr>
			<td class="titlebg">', $txt['repair_attachments'], '</td>
		</tr><tr>
			<td class="windowbg2">
				', $txt['repair_attachments_error_desc'], '
			</td>
		</tr>';

		// Loop through each error reporting the status
		foreach ($context['repair_errors'] as $error => $number)
		{
			if (!empty($number))
			echo '
		<tr class="windowbg2">
			<td>
				<input type="checkbox" name="to_fix[]" id="', $error, '" value="', $error, '" />
				<label for="', $error, '">', sprintf($txt['attach_pmrepair_' . $error], $number), '</label>
			</td>
		</tr>';
		}

		echo '
		<tr>
			<td align="center" class="windowbg2">
				<input type="submit" value="', $txt['repair_attachments_continue'], '" />
				<input type="submit" name="cancel" value="', $txt['repair_attachments_cancel'], '" />
			</td>
		</tr>
	</table>
	</form>';
	}

}

function template_pmattachment_paths()
{
	template_show_list('pmattach_paths');
}

]]></add>
	</operation>
</file>
</modification>
